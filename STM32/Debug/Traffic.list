
Traffic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003220  08003220  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003220  08003220  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003220  08003220  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000005c  08003284  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003284  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000910c  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3a  00000000  00000000  00029191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aa8  00000000  00000000  0002bf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4d7  00000000  00000000  00042a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082191  00000000  00000000  0004ded7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002890  00000000  00000000  000d00bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080031e8 	.word	0x080031e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080031e8 	.word	0x080031e8

0800014c <isButton1Pressed>:
int KeyReg10 = NORMAL_STATE;
int KeyReg11 = NORMAL_STATE;

int TimeForKeyPress =  50; //Thời gian nhận tín hiệu khi nhấn đè

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000078 	.word	0x20000078

08000170 <isButton2Pressed>:
int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000007c 	.word	0x2000007c

08000194 <isButton3Pressed>:
int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000080 	.word	0x20000080

080001b8 <subKeyProcess1>:

void subKeyProcess1(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000078 	.word	0x20000078

080001d0 <subKeyProcess2>:
void subKeyProcess2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	2000007c 	.word	0x2000007c

080001e8 <subKeyProcess3>:
void subKeyProcess3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000080 	.word	0x20000080

08000200 <getKeyInput1>:


void getKeyInput1(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  KeyReg0 = KeyReg1;
 8000204:	4b21      	ldr	r3, [pc, #132]	; (800028c <getKeyInput1+0x8c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a21      	ldr	r2, [pc, #132]	; (8000290 <getKeyInput1+0x90>)
 800020a:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg2;
 800020c:	4b21      	ldr	r3, [pc, #132]	; (8000294 <getKeyInput1+0x94>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1e      	ldr	r2, [pc, #120]	; (800028c <getKeyInput1+0x8c>)
 8000212:	6013      	str	r3, [r2, #0]
  KeyReg2 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000214:	2102      	movs	r1, #2
 8000216:	4820      	ldr	r0, [pc, #128]	; (8000298 <getKeyInput1+0x98>)
 8000218:	f001 ffa6 	bl	8002168 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b1c      	ldr	r3, [pc, #112]	; (8000294 <getKeyInput1+0x94>)
 8000222:	601a      	str	r2, [r3, #0]
  if ((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <getKeyInput1+0x90>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <getKeyInput1+0x8c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	429a      	cmp	r2, r3
 800022e:	d12b      	bne.n	8000288 <getKeyInput1+0x88>
 8000230:	4b16      	ldr	r3, [pc, #88]	; (800028c <getKeyInput1+0x8c>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <getKeyInput1+0x94>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	429a      	cmp	r2, r3
 800023a:	d125      	bne.n	8000288 <getKeyInput1+0x88>
    if (KeyReg2 != KeyReg3){
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <getKeyInput1+0x94>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <getKeyInput1+0x9c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	429a      	cmp	r2, r3
 8000246:	d00d      	beq.n	8000264 <getKeyInput1+0x64>
      KeyReg3 = KeyReg2;
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <getKeyInput1+0x94>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a13      	ldr	r2, [pc, #76]	; (800029c <getKeyInput1+0x9c>)
 800024e:	6013      	str	r3, [r2, #0]

      if (KeyReg2 == PRESSED_STATE){
 8000250:	4b10      	ldr	r3, [pc, #64]	; (8000294 <getKeyInput1+0x94>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d117      	bne.n	8000288 <getKeyInput1+0x88>
    	  subKeyProcess1();
 8000258:	f7ff ffae 	bl	80001b8 <subKeyProcess1>
    	  TimeForKeyPress = 100;
 800025c:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <getKeyInput1+0xa0>)
 800025e:	2264      	movs	r2, #100	; 0x64
 8000260:	601a      	str	r2, [r3, #0]
        	}
        	TimeForKeyPress = 100;
        }
    }
  }
}
 8000262:	e011      	b.n	8000288 <getKeyInput1+0x88>
       TimeForKeyPress --;
 8000264:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <getKeyInput1+0xa0>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	3b01      	subs	r3, #1
 800026a:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <getKeyInput1+0xa0>)
 800026c:	6013      	str	r3, [r2, #0]
        if (TimeForKeyPress == 0){
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <getKeyInput1+0xa0>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d108      	bne.n	8000288 <getKeyInput1+0x88>
        	if (KeyReg2 == PRESSED_STATE){
 8000276:	4b07      	ldr	r3, [pc, #28]	; (8000294 <getKeyInput1+0x94>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d101      	bne.n	8000282 <getKeyInput1+0x82>
        		subKeyProcess1();
 800027e:	f7ff ff9b 	bl	80001b8 <subKeyProcess1>
        	TimeForKeyPress = 100;
 8000282:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <getKeyInput1+0xa0>)
 8000284:	2264      	movs	r2, #100	; 0x64
 8000286:	601a      	str	r2, [r3, #0]
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000004 	.word	0x20000004
 8000290:	20000000 	.word	0x20000000
 8000294:	20000008 	.word	0x20000008
 8000298:	40010800 	.word	0x40010800
 800029c:	2000000c 	.word	0x2000000c
 80002a0:	20000030 	.word	0x20000030

080002a4 <getKeyInput2>:
void getKeyInput2(){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  KeyReg4 = KeyReg5;
 80002a8:	4b21      	ldr	r3, [pc, #132]	; (8000330 <getKeyInput2+0x8c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a21      	ldr	r2, [pc, #132]	; (8000334 <getKeyInput2+0x90>)
 80002ae:	6013      	str	r3, [r2, #0]
  KeyReg5 = KeyReg6;
 80002b0:	4b21      	ldr	r3, [pc, #132]	; (8000338 <getKeyInput2+0x94>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a1e      	ldr	r2, [pc, #120]	; (8000330 <getKeyInput2+0x8c>)
 80002b6:	6013      	str	r3, [r2, #0]
  KeyReg6 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80002b8:	2104      	movs	r1, #4
 80002ba:	4820      	ldr	r0, [pc, #128]	; (800033c <getKeyInput2+0x98>)
 80002bc:	f001 ff54 	bl	8002168 <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	461a      	mov	r2, r3
 80002c4:	4b1c      	ldr	r3, [pc, #112]	; (8000338 <getKeyInput2+0x94>)
 80002c6:	601a      	str	r2, [r3, #0]
  if ((KeyReg4 == KeyReg5) && (KeyReg5 == KeyReg6)){
 80002c8:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <getKeyInput2+0x90>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <getKeyInput2+0x8c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d12b      	bne.n	800032c <getKeyInput2+0x88>
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <getKeyInput2+0x8c>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b17      	ldr	r3, [pc, #92]	; (8000338 <getKeyInput2+0x94>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d125      	bne.n	800032c <getKeyInput2+0x88>
    if (KeyReg6 != KeyReg7){
 80002e0:	4b15      	ldr	r3, [pc, #84]	; (8000338 <getKeyInput2+0x94>)
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	4b16      	ldr	r3, [pc, #88]	; (8000340 <getKeyInput2+0x9c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d00d      	beq.n	8000308 <getKeyInput2+0x64>
      KeyReg7 = KeyReg6;
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <getKeyInput2+0x94>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a13      	ldr	r2, [pc, #76]	; (8000340 <getKeyInput2+0x9c>)
 80002f2:	6013      	str	r3, [r2, #0]

      if (KeyReg6 == PRESSED_STATE){
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <getKeyInput2+0x94>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d117      	bne.n	800032c <getKeyInput2+0x88>
    	  subKeyProcess2();
 80002fc:	f7ff ff68 	bl	80001d0 <subKeyProcess2>
    	  TimeForKeyPress = 50;
 8000300:	4b10      	ldr	r3, [pc, #64]	; (8000344 <getKeyInput2+0xa0>)
 8000302:	2232      	movs	r2, #50	; 0x32
 8000304:	601a      	str	r2, [r3, #0]
        	}
        	TimeForKeyPress = 50;
        }
    }
  }
}
 8000306:	e011      	b.n	800032c <getKeyInput2+0x88>
       TimeForKeyPress --;
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <getKeyInput2+0xa0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3b01      	subs	r3, #1
 800030e:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <getKeyInput2+0xa0>)
 8000310:	6013      	str	r3, [r2, #0]
        if (TimeForKeyPress == 0){
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <getKeyInput2+0xa0>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d108      	bne.n	800032c <getKeyInput2+0x88>
        	if (KeyReg6 == PRESSED_STATE){
 800031a:	4b07      	ldr	r3, [pc, #28]	; (8000338 <getKeyInput2+0x94>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d101      	bne.n	8000326 <getKeyInput2+0x82>
        		subKeyProcess2();
 8000322:	f7ff ff55 	bl	80001d0 <subKeyProcess2>
        	TimeForKeyPress = 50;
 8000326:	4b07      	ldr	r3, [pc, #28]	; (8000344 <getKeyInput2+0xa0>)
 8000328:	2232      	movs	r2, #50	; 0x32
 800032a:	601a      	str	r2, [r3, #0]
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000014 	.word	0x20000014
 8000334:	20000010 	.word	0x20000010
 8000338:	20000018 	.word	0x20000018
 800033c:	40010800 	.word	0x40010800
 8000340:	2000001c 	.word	0x2000001c
 8000344:	20000030 	.word	0x20000030

08000348 <getKeyInput3>:
void getKeyInput3(){
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  KeyReg8 = KeyReg9;
 800034c:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <getKeyInput3+0x8c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a21      	ldr	r2, [pc, #132]	; (80003d8 <getKeyInput3+0x90>)
 8000352:	6013      	str	r3, [r2, #0]
  KeyReg9 = KeyReg10;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <getKeyInput3+0x94>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <getKeyInput3+0x8c>)
 800035a:	6013      	str	r3, [r2, #0]
  KeyReg10 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 800035c:	2108      	movs	r1, #8
 800035e:	4820      	ldr	r0, [pc, #128]	; (80003e0 <getKeyInput3+0x98>)
 8000360:	f001 ff02 	bl	8002168 <HAL_GPIO_ReadPin>
 8000364:	4603      	mov	r3, r0
 8000366:	461a      	mov	r2, r3
 8000368:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <getKeyInput3+0x94>)
 800036a:	601a      	str	r2, [r3, #0]
  if ((KeyReg8 == KeyReg9) && (KeyReg9 == KeyReg10)){
 800036c:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <getKeyInput3+0x90>)
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <getKeyInput3+0x8c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	429a      	cmp	r2, r3
 8000376:	d12b      	bne.n	80003d0 <getKeyInput3+0x88>
 8000378:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <getKeyInput3+0x8c>)
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	4b17      	ldr	r3, [pc, #92]	; (80003dc <getKeyInput3+0x94>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	429a      	cmp	r2, r3
 8000382:	d125      	bne.n	80003d0 <getKeyInput3+0x88>
    if (KeyReg10 != KeyReg11){
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <getKeyInput3+0x94>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <getKeyInput3+0x9c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	429a      	cmp	r2, r3
 800038e:	d00d      	beq.n	80003ac <getKeyInput3+0x64>
      KeyReg11 = KeyReg10;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <getKeyInput3+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <getKeyInput3+0x9c>)
 8000396:	6013      	str	r3, [r2, #0]

      if (KeyReg10 == PRESSED_STATE){
 8000398:	4b10      	ldr	r3, [pc, #64]	; (80003dc <getKeyInput3+0x94>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d117      	bne.n	80003d0 <getKeyInput3+0x88>
    	  subKeyProcess3();
 80003a0:	f7ff ff22 	bl	80001e8 <subKeyProcess3>
    	  TimeForKeyPress = 100;
 80003a4:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <getKeyInput3+0xa0>)
 80003a6:	2264      	movs	r2, #100	; 0x64
 80003a8:	601a      	str	r2, [r3, #0]
        	}
        	TimeForKeyPress = 100;
        }
    }
  }
}
 80003aa:	e011      	b.n	80003d0 <getKeyInput3+0x88>
       TimeForKeyPress --;
 80003ac:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <getKeyInput3+0xa0>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	3b01      	subs	r3, #1
 80003b2:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <getKeyInput3+0xa0>)
 80003b4:	6013      	str	r3, [r2, #0]
        if (TimeForKeyPress == 0){
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <getKeyInput3+0xa0>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d108      	bne.n	80003d0 <getKeyInput3+0x88>
        	if (KeyReg10 == PRESSED_STATE){
 80003be:	4b07      	ldr	r3, [pc, #28]	; (80003dc <getKeyInput3+0x94>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d101      	bne.n	80003ca <getKeyInput3+0x82>
        		subKeyProcess3();
 80003c6:	f7ff ff0f 	bl	80001e8 <subKeyProcess3>
        	TimeForKeyPress = 100;
 80003ca:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <getKeyInput3+0xa0>)
 80003cc:	2264      	movs	r2, #100	; 0x64
 80003ce:	601a      	str	r2, [r3, #0]
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000024 	.word	0x20000024
 80003d8:	20000020 	.word	0x20000020
 80003dc:	20000028 	.word	0x20000028
 80003e0:	40010800 	.word	0x40010800
 80003e4:	2000002c 	.word	0x2000002c
 80003e8:	20000030 	.word	0x20000030

080003ec <fsm_auto_run>:
 *  Created on: Oct 28, 2022
 *      Author: Admin
 */
#include "fsm.h"

void fsm_auto_run(){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	switch(status){
 80003f0:	4bb0      	ldr	r3, [pc, #704]	; (80006b4 <fsm_auto_run+0x2c8>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b04      	cmp	r3, #4
 80003f6:	f200 821e 	bhi.w	8000836 <fsm_auto_run+0x44a>
 80003fa:	a201      	add	r2, pc, #4	; (adr r2, 8000400 <fsm_auto_run+0x14>)
 80003fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000400:	08000415 	.word	0x08000415
 8000404:	08000465 	.word	0x08000465
 8000408:	08000555 	.word	0x08000555
 800040c:	0800063f 	.word	0x0800063f
 8000410:	0800074f 	.word	0x0800074f
	case INIT:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8000414:	2201      	movs	r2, #1
 8000416:	2120      	movs	r1, #32
 8000418:	48a7      	ldr	r0, [pc, #668]	; (80006b8 <fsm_auto_run+0x2cc>)
 800041a:	f001 febc 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 800041e:	2201      	movs	r2, #1
 8000420:	2140      	movs	r1, #64	; 0x40
 8000422:	48a5      	ldr	r0, [pc, #660]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000424:	f001 feb7 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 8000428:	2201      	movs	r2, #1
 800042a:	2180      	movs	r1, #128	; 0x80
 800042c:	48a2      	ldr	r0, [pc, #648]	; (80006b8 <fsm_auto_run+0x2cc>)
 800042e:	f001 feb2 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000432:	2201      	movs	r2, #1
 8000434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000438:	489f      	ldr	r0, [pc, #636]	; (80006b8 <fsm_auto_run+0x2cc>)
 800043a:	f001 feac 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 800043e:	2201      	movs	r2, #1
 8000440:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000444:	489c      	ldr	r0, [pc, #624]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000446:	f001 fea6 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 800044a:	2201      	movs	r2, #1
 800044c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000450:	4899      	ldr	r0, [pc, #612]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000452:	f001 fea0 	bl	8002196 <HAL_GPIO_WritePin>

		status = MODE_1;
 8000456:	4b97      	ldr	r3, [pc, #604]	; (80006b4 <fsm_auto_run+0x2c8>)
 8000458:	220b      	movs	r2, #11
 800045a:	601a      	str	r2, [r3, #0]
		setTimer3(250);
 800045c:	20fa      	movs	r0, #250	; 0xfa
 800045e:	f001 fa5b 	bl	8001918 <setTimer3>
		break;
 8000462:	e1f1      	b.n	8000848 <fsm_auto_run+0x45c>
	case RED_GREEN:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2120      	movs	r1, #32
 8000468:	4893      	ldr	r0, [pc, #588]	; (80006b8 <fsm_auto_run+0x2cc>)
 800046a:	f001 fe94 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 800046e:	2201      	movs	r2, #1
 8000470:	2140      	movs	r1, #64	; 0x40
 8000472:	4891      	ldr	r0, [pc, #580]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000474:	f001 fe8f 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 8000478:	2201      	movs	r2, #1
 800047a:	2180      	movs	r1, #128	; 0x80
 800047c:	488e      	ldr	r0, [pc, #568]	; (80006b8 <fsm_auto_run+0x2cc>)
 800047e:	f001 fe8a 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000488:	488b      	ldr	r0, [pc, #556]	; (80006b8 <fsm_auto_run+0x2cc>)
 800048a:	f001 fe84 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 800048e:	2201      	movs	r2, #1
 8000490:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000494:	4888      	ldr	r0, [pc, #544]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000496:	f001 fe7e 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a0:	4885      	ldr	r0, [pc, #532]	; (80006b8 <fsm_auto_run+0x2cc>)
 80004a2:	f001 fe78 	bl	8002196 <HAL_GPIO_WritePin>
		if (timer4_flag == 1){
 80004a6:	4b85      	ldr	r3, [pc, #532]	; (80006bc <fsm_auto_run+0x2d0>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d101      	bne.n	80004b2 <fsm_auto_run+0xc6>
			decrease_1sec();
 80004ae:	f001 f899 	bl	80015e4 <decrease_1sec>
		}
		if (timer3_flag == 1){ //Turn on index_led-th 7SEG
 80004b2:	4b83      	ldr	r3, [pc, #524]	; (80006c0 <fsm_auto_run+0x2d4>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d11a      	bne.n	80004f0 <fsm_auto_run+0x104>
			  if (index_7seg >= 4) {
 80004ba:	4b82      	ldr	r3, [pc, #520]	; (80006c4 <fsm_auto_run+0x2d8>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b03      	cmp	r3, #3
 80004c0:	dd0b      	ble.n	80004da <fsm_auto_run+0xee>
					index_7seg = 0;
 80004c2:	4b80      	ldr	r3, [pc, #512]	; (80006c4 <fsm_auto_run+0x2d8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
					update7SEG(index_7seg++);
 80004c8:	4b7e      	ldr	r3, [pc, #504]	; (80006c4 <fsm_auto_run+0x2d8>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	1c5a      	adds	r2, r3, #1
 80004ce:	497d      	ldr	r1, [pc, #500]	; (80006c4 <fsm_auto_run+0x2d8>)
 80004d0:	600a      	str	r2, [r1, #0]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fff0 	bl	80014b8 <update7SEG>
 80004d8:	e007      	b.n	80004ea <fsm_auto_run+0xfe>
			  } else {
					update7SEG(index_7seg++);
 80004da:	4b7a      	ldr	r3, [pc, #488]	; (80006c4 <fsm_auto_run+0x2d8>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	1c5a      	adds	r2, r3, #1
 80004e0:	4978      	ldr	r1, [pc, #480]	; (80006c4 <fsm_auto_run+0x2d8>)
 80004e2:	600a      	str	r2, [r1, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 ffe7 	bl	80014b8 <update7SEG>
				}
			  setTimer3(250);
 80004ea:	20fa      	movs	r0, #250	; 0xfa
 80004ec:	f001 fa14 	bl	8001918 <setTimer3>
		  }
		if (timer2_flag == 1){
 80004f0:	4b75      	ldr	r3, [pc, #468]	; (80006c8 <fsm_auto_run+0x2dc>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d118      	bne.n	800052a <fsm_auto_run+0x13e>
			status = RED_YELLOW;
 80004f8:	4b6e      	ldr	r3, [pc, #440]	; (80006b4 <fsm_auto_run+0x2c8>)
 80004fa:	2202      	movs	r2, #2
 80004fc:	601a      	str	r2, [r3, #0]
			count[0] = traffic_count[0] - traffic_count[2];
 80004fe:	4b73      	ldr	r3, [pc, #460]	; (80006cc <fsm_auto_run+0x2e0>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	4b72      	ldr	r3, [pc, #456]	; (80006cc <fsm_auto_run+0x2e0>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	4a71      	ldr	r2, [pc, #452]	; (80006d0 <fsm_auto_run+0x2e4>)
 800050a:	6013      	str	r3, [r2, #0]
			count[1] = traffic_count[1];
 800050c:	4b6f      	ldr	r3, [pc, #444]	; (80006cc <fsm_auto_run+0x2e0>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4a6f      	ldr	r2, [pc, #444]	; (80006d0 <fsm_auto_run+0x2e4>)
 8000512:	6053      	str	r3, [r2, #4]
			decrease_1sec();
 8000514:	f001 f866 	bl	80015e4 <decrease_1sec>
			setTimer2(traffic_count[1]*1000);
 8000518:	4b6c      	ldr	r3, [pc, #432]	; (80006cc <fsm_auto_run+0x2e0>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000520:	fb02 f303 	mul.w	r3, r2, r3
 8000524:	4618      	mov	r0, r3
 8000526:	f001 f9dd 	bl	80018e4 <setTimer2>
		}
		if (isButton1Pressed() == 1){
 800052a:	f7ff fe0f 	bl	800014c <isButton1Pressed>
 800052e:	4603      	mov	r3, r0
 8000530:	2b01      	cmp	r3, #1
 8000532:	f040 8182 	bne.w	800083a <fsm_auto_run+0x44e>
			status = MODE_2;
 8000536:	4b5f      	ldr	r3, [pc, #380]	; (80006b4 <fsm_auto_run+0x2c8>)
 8000538:	220c      	movs	r2, #12
 800053a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2120      	movs	r1, #32
 8000540:	485d      	ldr	r0, [pc, #372]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000542:	f001 fe28 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	485a      	ldr	r0, [pc, #360]	; (80006b8 <fsm_auto_run+0x2cc>)
 800054e:	f001 fe22 	bl	8002196 <HAL_GPIO_WritePin>
		}
		break;
 8000552:	e172      	b.n	800083a <fsm_auto_run+0x44e>
	case RED_YELLOW:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2120      	movs	r1, #32
 8000558:	4857      	ldr	r0, [pc, #348]	; (80006b8 <fsm_auto_run+0x2cc>)
 800055a:	f001 fe1c 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	4855      	ldr	r0, [pc, #340]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000564:	f001 fe17 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	4852      	ldr	r0, [pc, #328]	; (80006b8 <fsm_auto_run+0x2cc>)
 800056e:	f001 fe12 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000578:	484f      	ldr	r0, [pc, #316]	; (80006b8 <fsm_auto_run+0x2cc>)
 800057a:	f001 fe0c 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000584:	484c      	ldr	r0, [pc, #304]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000586:	f001 fe06 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	4849      	ldr	r0, [pc, #292]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000592:	f001 fe00 	bl	8002196 <HAL_GPIO_WritePin>
		if (timer4_flag == 1){
 8000596:	4b49      	ldr	r3, [pc, #292]	; (80006bc <fsm_auto_run+0x2d0>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d101      	bne.n	80005a2 <fsm_auto_run+0x1b6>
			decrease_1sec();
 800059e:	f001 f821 	bl	80015e4 <decrease_1sec>
		}
		if (timer3_flag == 1){ //Turn on index_led-th 7SEG
 80005a2:	4b47      	ldr	r3, [pc, #284]	; (80006c0 <fsm_auto_run+0x2d4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d11a      	bne.n	80005e0 <fsm_auto_run+0x1f4>
			  if (index_7seg >= 4) {
 80005aa:	4b46      	ldr	r3, [pc, #280]	; (80006c4 <fsm_auto_run+0x2d8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	dd0b      	ble.n	80005ca <fsm_auto_run+0x1de>
					index_7seg = 0;
 80005b2:	4b44      	ldr	r3, [pc, #272]	; (80006c4 <fsm_auto_run+0x2d8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
					update7SEG(index_7seg++);
 80005b8:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <fsm_auto_run+0x2d8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	1c5a      	adds	r2, r3, #1
 80005be:	4941      	ldr	r1, [pc, #260]	; (80006c4 <fsm_auto_run+0x2d8>)
 80005c0:	600a      	str	r2, [r1, #0]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 ff78 	bl	80014b8 <update7SEG>
 80005c8:	e007      	b.n	80005da <fsm_auto_run+0x1ee>
			  } else {
					update7SEG(index_7seg++);
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <fsm_auto_run+0x2d8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	493c      	ldr	r1, [pc, #240]	; (80006c4 <fsm_auto_run+0x2d8>)
 80005d2:	600a      	str	r2, [r1, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 ff6f 	bl	80014b8 <update7SEG>
				}
			  setTimer3(250);
 80005da:	20fa      	movs	r0, #250	; 0xfa
 80005dc:	f001 f99c 	bl	8001918 <setTimer3>
		  }
		if (timer2_flag == 1){
 80005e0:	4b39      	ldr	r3, [pc, #228]	; (80006c8 <fsm_auto_run+0x2dc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d115      	bne.n	8000614 <fsm_auto_run+0x228>
			status = GREEN_RED;
 80005e8:	4b32      	ldr	r3, [pc, #200]	; (80006b4 <fsm_auto_run+0x2c8>)
 80005ea:	2203      	movs	r2, #3
 80005ec:	601a      	str	r2, [r3, #0]
			count[0] = traffic_count[2];
 80005ee:	4b37      	ldr	r3, [pc, #220]	; (80006cc <fsm_auto_run+0x2e0>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a37      	ldr	r2, [pc, #220]	; (80006d0 <fsm_auto_run+0x2e4>)
 80005f4:	6013      	str	r3, [r2, #0]
			count[1] = traffic_count[0];
 80005f6:	4b35      	ldr	r3, [pc, #212]	; (80006cc <fsm_auto_run+0x2e0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a35      	ldr	r2, [pc, #212]	; (80006d0 <fsm_auto_run+0x2e4>)
 80005fc:	6053      	str	r3, [r2, #4]
			decrease_1sec();
 80005fe:	f000 fff1 	bl	80015e4 <decrease_1sec>
			setTimer2(traffic_count[2]*1000);
 8000602:	4b32      	ldr	r3, [pc, #200]	; (80006cc <fsm_auto_run+0x2e0>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800060a:	fb02 f303 	mul.w	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f001 f968 	bl	80018e4 <setTimer2>
		}
		if (isButton1Pressed() == 1){
 8000614:	f7ff fd9a 	bl	800014c <isButton1Pressed>
 8000618:	4603      	mov	r3, r0
 800061a:	2b01      	cmp	r3, #1
 800061c:	f040 810f 	bne.w	800083e <fsm_auto_run+0x452>
			status = MODE_2;
 8000620:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <fsm_auto_run+0x2c8>)
 8000622:	220c      	movs	r2, #12
 8000624:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2120      	movs	r1, #32
 800062a:	4823      	ldr	r0, [pc, #140]	; (80006b8 <fsm_auto_run+0x2cc>)
 800062c:	f001 fdb3 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000636:	4820      	ldr	r0, [pc, #128]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000638:	f001 fdad 	bl	8002196 <HAL_GPIO_WritePin>
		}
		break;
 800063c:	e0ff      	b.n	800083e <fsm_auto_run+0x452>
	case GREEN_RED:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2120      	movs	r1, #32
 8000642:	481d      	ldr	r0, [pc, #116]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000644:	f001 fda7 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	481a      	ldr	r0, [pc, #104]	; (80006b8 <fsm_auto_run+0x2cc>)
 800064e:	f001 fda2 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	4818      	ldr	r0, [pc, #96]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000658:	f001 fd9d 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000662:	4815      	ldr	r0, [pc, #84]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000664:	f001 fd97 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <fsm_auto_run+0x2cc>)
 8000670:	f001 fd91 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067a:	480f      	ldr	r0, [pc, #60]	; (80006b8 <fsm_auto_run+0x2cc>)
 800067c:	f001 fd8b 	bl	8002196 <HAL_GPIO_WritePin>
		if (timer4_flag == 1){
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <fsm_auto_run+0x2d0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d101      	bne.n	800068c <fsm_auto_run+0x2a0>
			decrease_1sec();
 8000688:	f000 ffac 	bl	80015e4 <decrease_1sec>
		}
		if (timer3_flag == 1){ //Turn on index_led-th 7SEG
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <fsm_auto_run+0x2d4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d12a      	bne.n	80006ea <fsm_auto_run+0x2fe>
			  if (index_7seg >= 4) {
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <fsm_auto_run+0x2d8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b03      	cmp	r3, #3
 800069a:	dd1b      	ble.n	80006d4 <fsm_auto_run+0x2e8>
					index_7seg = 0;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <fsm_auto_run+0x2d8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
					update7SEG(index_7seg++);
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <fsm_auto_run+0x2d8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	4906      	ldr	r1, [pc, #24]	; (80006c4 <fsm_auto_run+0x2d8>)
 80006aa:	600a      	str	r2, [r1, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 ff03 	bl	80014b8 <update7SEG>
 80006b2:	e017      	b.n	80006e4 <fsm_auto_run+0x2f8>
 80006b4:	20000084 	.word	0x20000084
 80006b8:	40010800 	.word	0x40010800
 80006bc:	200000bc 	.word	0x200000bc
 80006c0:	200000b4 	.word	0x200000b4
 80006c4:	2000008c 	.word	0x2000008c
 80006c8:	200000ac 	.word	0x200000ac
 80006cc:	20000034 	.word	0x20000034
 80006d0:	20000040 	.word	0x20000040
			  } else {
					update7SEG(index_7seg++);
 80006d4:	4b5d      	ldr	r3, [pc, #372]	; (800084c <fsm_auto_run+0x460>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	495c      	ldr	r1, [pc, #368]	; (800084c <fsm_auto_run+0x460>)
 80006dc:	600a      	str	r2, [r1, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 feea 	bl	80014b8 <update7SEG>
				}
			  setTimer3(250);
 80006e4:	20fa      	movs	r0, #250	; 0xfa
 80006e6:	f001 f917 	bl	8001918 <setTimer3>
		  }
		if (timer2_flag == 1){
 80006ea:	4b59      	ldr	r3, [pc, #356]	; (8000850 <fsm_auto_run+0x464>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d118      	bne.n	8000724 <fsm_auto_run+0x338>
			status = YELLOW_RED;
 80006f2:	4b58      	ldr	r3, [pc, #352]	; (8000854 <fsm_auto_run+0x468>)
 80006f4:	2204      	movs	r2, #4
 80006f6:	601a      	str	r2, [r3, #0]
			count[1] = traffic_count[0] - traffic_count[2];
 80006f8:	4b57      	ldr	r3, [pc, #348]	; (8000858 <fsm_auto_run+0x46c>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b56      	ldr	r3, [pc, #344]	; (8000858 <fsm_auto_run+0x46c>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	4a56      	ldr	r2, [pc, #344]	; (800085c <fsm_auto_run+0x470>)
 8000704:	6053      	str	r3, [r2, #4]
			count[0] = traffic_count[1];
 8000706:	4b54      	ldr	r3, [pc, #336]	; (8000858 <fsm_auto_run+0x46c>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	4a54      	ldr	r2, [pc, #336]	; (800085c <fsm_auto_run+0x470>)
 800070c:	6013      	str	r3, [r2, #0]
			decrease_1sec();
 800070e:	f000 ff69 	bl	80015e4 <decrease_1sec>
			setTimer2(traffic_count[1]*1000);
 8000712:	4b51      	ldr	r3, [pc, #324]	; (8000858 <fsm_auto_run+0x46c>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800071a:	fb02 f303 	mul.w	r3, r2, r3
 800071e:	4618      	mov	r0, r3
 8000720:	f001 f8e0 	bl	80018e4 <setTimer2>
		}
		if (isButton1Pressed() == 1){
 8000724:	f7ff fd12 	bl	800014c <isButton1Pressed>
 8000728:	4603      	mov	r3, r0
 800072a:	2b01      	cmp	r3, #1
 800072c:	f040 8089 	bne.w	8000842 <fsm_auto_run+0x456>
			status = MODE_2;
 8000730:	4b48      	ldr	r3, [pc, #288]	; (8000854 <fsm_auto_run+0x468>)
 8000732:	220c      	movs	r2, #12
 8000734:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2120      	movs	r1, #32
 800073a:	4849      	ldr	r0, [pc, #292]	; (8000860 <fsm_auto_run+0x474>)
 800073c:	f001 fd2b 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	4846      	ldr	r0, [pc, #280]	; (8000860 <fsm_auto_run+0x474>)
 8000748:	f001 fd25 	bl	8002196 <HAL_GPIO_WritePin>
		}
		break;
 800074c:	e079      	b.n	8000842 <fsm_auto_run+0x456>
	case YELLOW_RED:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	4843      	ldr	r0, [pc, #268]	; (8000860 <fsm_auto_run+0x474>)
 8000754:	f001 fd1f 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2140      	movs	r1, #64	; 0x40
 800075c:	4840      	ldr	r0, [pc, #256]	; (8000860 <fsm_auto_run+0x474>)
 800075e:	f001 fd1a 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	483e      	ldr	r0, [pc, #248]	; (8000860 <fsm_auto_run+0x474>)
 8000768:	f001 fd15 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000772:	483b      	ldr	r0, [pc, #236]	; (8000860 <fsm_auto_run+0x474>)
 8000774:	f001 fd0f 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077e:	4838      	ldr	r0, [pc, #224]	; (8000860 <fsm_auto_run+0x474>)
 8000780:	f001 fd09 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078a:	4835      	ldr	r0, [pc, #212]	; (8000860 <fsm_auto_run+0x474>)
 800078c:	f001 fd03 	bl	8002196 <HAL_GPIO_WritePin>
		if (timer4_flag == 1){
 8000790:	4b34      	ldr	r3, [pc, #208]	; (8000864 <fsm_auto_run+0x478>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d101      	bne.n	800079c <fsm_auto_run+0x3b0>
			decrease_1sec();
 8000798:	f000 ff24 	bl	80015e4 <decrease_1sec>
		}
		if (timer3_flag == 1){ //Turn on index_led-th 7SEG
 800079c:	4b32      	ldr	r3, [pc, #200]	; (8000868 <fsm_auto_run+0x47c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d11a      	bne.n	80007da <fsm_auto_run+0x3ee>
			  if (index_7seg >= 4) {
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <fsm_auto_run+0x460>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	dd0b      	ble.n	80007c4 <fsm_auto_run+0x3d8>
					index_7seg = 0;
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <fsm_auto_run+0x460>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
					update7SEG(index_7seg++);
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <fsm_auto_run+0x460>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	4924      	ldr	r1, [pc, #144]	; (800084c <fsm_auto_run+0x460>)
 80007ba:	600a      	str	r2, [r1, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fe7b 	bl	80014b8 <update7SEG>
 80007c2:	e007      	b.n	80007d4 <fsm_auto_run+0x3e8>
			  } else {
					update7SEG(index_7seg++);
 80007c4:	4b21      	ldr	r3, [pc, #132]	; (800084c <fsm_auto_run+0x460>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	4920      	ldr	r1, [pc, #128]	; (800084c <fsm_auto_run+0x460>)
 80007cc:	600a      	str	r2, [r1, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fe72 	bl	80014b8 <update7SEG>
				}
			  setTimer3(250);
 80007d4:	20fa      	movs	r0, #250	; 0xfa
 80007d6:	f001 f89f 	bl	8001918 <setTimer3>
		  }
		if (timer2_flag == 1){
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <fsm_auto_run+0x464>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d115      	bne.n	800080e <fsm_auto_run+0x422>
			status = RED_GREEN;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <fsm_auto_run+0x468>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
			count[0] = traffic_count[0];
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <fsm_auto_run+0x46c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a1b      	ldr	r2, [pc, #108]	; (800085c <fsm_auto_run+0x470>)
 80007ee:	6013      	str	r3, [r2, #0]
			count[1] = traffic_count[2];
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <fsm_auto_run+0x46c>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <fsm_auto_run+0x470>)
 80007f6:	6053      	str	r3, [r2, #4]
			decrease_1sec();
 80007f8:	f000 fef4 	bl	80015e4 <decrease_1sec>
			setTimer2(traffic_count[2]*1000);
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <fsm_auto_run+0x46c>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	4618      	mov	r0, r3
 800080a:	f001 f86b 	bl	80018e4 <setTimer2>
		}
		if (isButton1Pressed() == 1){
 800080e:	f7ff fc9d 	bl	800014c <isButton1Pressed>
 8000812:	4603      	mov	r3, r0
 8000814:	2b01      	cmp	r3, #1
 8000816:	d116      	bne.n	8000846 <fsm_auto_run+0x45a>
			status = MODE_2;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <fsm_auto_run+0x468>)
 800081a:	220c      	movs	r2, #12
 800081c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2120      	movs	r1, #32
 8000822:	480f      	ldr	r0, [pc, #60]	; (8000860 <fsm_auto_run+0x474>)
 8000824:	f001 fcb7 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <fsm_auto_run+0x474>)
 8000830:	f001 fcb1 	bl	8002196 <HAL_GPIO_WritePin>
		}

		break;
 8000834:	e007      	b.n	8000846 <fsm_auto_run+0x45a>
	default:
		break;
 8000836:	bf00      	nop
 8000838:	e006      	b.n	8000848 <fsm_auto_run+0x45c>
		break;
 800083a:	bf00      	nop
 800083c:	e004      	b.n	8000848 <fsm_auto_run+0x45c>
		break;
 800083e:	bf00      	nop
 8000840:	e002      	b.n	8000848 <fsm_auto_run+0x45c>
		break;
 8000842:	bf00      	nop
 8000844:	e000      	b.n	8000848 <fsm_auto_run+0x45c>
		break;
 8000846:	bf00      	nop
	}
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000008c 	.word	0x2000008c
 8000850:	200000ac 	.word	0x200000ac
 8000854:	20000084 	.word	0x20000084
 8000858:	20000034 	.word	0x20000034
 800085c:	20000040 	.word	0x20000040
 8000860:	40010800 	.word	0x40010800
 8000864:	200000bc 	.word	0x200000bc
 8000868:	200000b4 	.word	0x200000b4

0800086c <fsm_manual_run>:
 *      Author: Admin
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	switch (status){
 8000870:	4bad      	ldr	r3, [pc, #692]	; (8000b28 <fsm_manual_run+0x2bc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3b0b      	subs	r3, #11
 8000876:	2b0c      	cmp	r3, #12
 8000878:	f200 8477 	bhi.w	800116a <fsm_manual_run+0x8fe>
 800087c:	a201      	add	r2, pc, #4	; (adr r2, 8000884 <fsm_manual_run+0x18>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	080008b9 	.word	0x080008b9
 8000888:	0800098f 	.word	0x0800098f
 800088c:	08000acf 	.word	0x08000acf
 8000890:	08000c37 	.word	0x08000c37
 8000894:	0800116b 	.word	0x0800116b
 8000898:	0800116b 	.word	0x0800116b
 800089c:	0800116b 	.word	0x0800116b
 80008a0:	0800116b 	.word	0x0800116b
 80008a4:	0800116b 	.word	0x0800116b
 80008a8:	0800116b 	.word	0x0800116b
 80008ac:	08000d7b 	.word	0x08000d7b
 80008b0:	08000ed9 	.word	0x08000ed9
 80008b4:	0800100f 	.word	0x0800100f
	case MODE_1:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2120      	movs	r1, #32
 80008bc:	489b      	ldr	r0, [pc, #620]	; (8000b2c <fsm_manual_run+0x2c0>)
 80008be:	f001 fc6a 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2140      	movs	r1, #64	; 0x40
 80008c6:	4899      	ldr	r0, [pc, #612]	; (8000b2c <fsm_manual_run+0x2c0>)
 80008c8:	f001 fc65 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2180      	movs	r1, #128	; 0x80
 80008d0:	4896      	ldr	r0, [pc, #600]	; (8000b2c <fsm_manual_run+0x2c0>)
 80008d2:	f001 fc60 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008dc:	4893      	ldr	r0, [pc, #588]	; (8000b2c <fsm_manual_run+0x2c0>)
 80008de:	f001 fc5a 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e8:	4890      	ldr	r0, [pc, #576]	; (8000b2c <fsm_manual_run+0x2c0>)
 80008ea:	f001 fc54 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f4:	488d      	ldr	r0, [pc, #564]	; (8000b2c <fsm_manual_run+0x2c0>)
 80008f6:	f001 fc4e 	bl	8002196 <HAL_GPIO_WritePin>
		 if (timer3_flag == 1){ //Turn on index_led-th 7SEG
 80008fa:	4b8d      	ldr	r3, [pc, #564]	; (8000b30 <fsm_manual_run+0x2c4>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d120      	bne.n	8000944 <fsm_manual_run+0xd8>
			  if (index_7seg >= 4) {
 8000902:	4b8c      	ldr	r3, [pc, #560]	; (8000b34 <fsm_manual_run+0x2c8>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b03      	cmp	r3, #3
 8000908:	dd0e      	ble.n	8000928 <fsm_manual_run+0xbc>
					index_7seg = 0;
 800090a:	4b8a      	ldr	r3, [pc, #552]	; (8000b34 <fsm_manual_run+0x2c8>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
					clock_buffer[0] = 0;
 8000910:	4b89      	ldr	r3, [pc, #548]	; (8000b38 <fsm_manual_run+0x2cc>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
					update7SEG(index_7seg++);
 8000916:	4b87      	ldr	r3, [pc, #540]	; (8000b34 <fsm_manual_run+0x2c8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	4985      	ldr	r1, [pc, #532]	; (8000b34 <fsm_manual_run+0x2c8>)
 800091e:	600a      	str	r2, [r1, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fdc9 	bl	80014b8 <update7SEG>
 8000926:	e00a      	b.n	800093e <fsm_manual_run+0xd2>
			  } else {
				  	clock_buffer[1] = 1;
 8000928:	4b83      	ldr	r3, [pc, #524]	; (8000b38 <fsm_manual_run+0x2cc>)
 800092a:	2201      	movs	r2, #1
 800092c:	605a      	str	r2, [r3, #4]
					update7SEG(index_7seg++);
 800092e:	4b81      	ldr	r3, [pc, #516]	; (8000b34 <fsm_manual_run+0x2c8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	497f      	ldr	r1, [pc, #508]	; (8000b34 <fsm_manual_run+0x2c8>)
 8000936:	600a      	str	r2, [r1, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fdbd 	bl	80014b8 <update7SEG>
				}
			  setTimer3(250);
 800093e:	20fa      	movs	r0, #250	; 0xfa
 8000940:	f000 ffea 	bl	8001918 <setTimer3>
		  }

		if (isButton1Pressed() == 1){
 8000944:	f7ff fc02 	bl	800014c <isButton1Pressed>
 8000948:	4603      	mov	r3, r0
 800094a:	2b01      	cmp	r3, #1
 800094c:	d102      	bne.n	8000954 <fsm_manual_run+0xe8>
			status = MODE_2;
 800094e:	4b76      	ldr	r3, [pc, #472]	; (8000b28 <fsm_manual_run+0x2bc>)
 8000950:	220c      	movs	r2, #12
 8000952:	601a      	str	r2, [r3, #0]
		}
		if (isButton3Pressed() == 1){
 8000954:	f7ff fc1e 	bl	8000194 <isButton3Pressed>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	f040 8407 	bne.w	800116e <fsm_manual_run+0x902>
			status = RED_GREEN;
 8000960:	4b71      	ldr	r3, [pc, #452]	; (8000b28 <fsm_manual_run+0x2bc>)
 8000962:	2201      	movs	r2, #1
 8000964:	601a      	str	r2, [r3, #0]
			count[0] = traffic_count[0];
 8000966:	4b75      	ldr	r3, [pc, #468]	; (8000b3c <fsm_manual_run+0x2d0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a75      	ldr	r2, [pc, #468]	; (8000b40 <fsm_manual_run+0x2d4>)
 800096c:	6013      	str	r3, [r2, #0]
			count[1] = traffic_count[2];
 800096e:	4b73      	ldr	r3, [pc, #460]	; (8000b3c <fsm_manual_run+0x2d0>)
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	4a73      	ldr	r2, [pc, #460]	; (8000b40 <fsm_manual_run+0x2d4>)
 8000974:	6053      	str	r3, [r2, #4]
			decrease_1sec();
 8000976:	f000 fe35 	bl	80015e4 <decrease_1sec>
			setTimer2(traffic_count[2]*1000);
 800097a:	4b70      	ldr	r3, [pc, #448]	; (8000b3c <fsm_manual_run+0x2d0>)
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 ffac 	bl	80018e4 <setTimer2>
		}
		break;
 800098c:	e3ef      	b.n	800116e <fsm_manual_run+0x902>
	case MODE_2:
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	4866      	ldr	r0, [pc, #408]	; (8000b2c <fsm_manual_run+0x2c0>)
 8000994:	f001 fbff 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	4863      	ldr	r0, [pc, #396]	; (8000b2c <fsm_manual_run+0x2c0>)
 800099e:	f001 fbfa 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a8:	4860      	ldr	r0, [pc, #384]	; (8000b2c <fsm_manual_run+0x2c0>)
 80009aa:	f001 fbf4 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b4:	485d      	ldr	r0, [pc, #372]	; (8000b2c <fsm_manual_run+0x2c0>)
 80009b6:	f001 fbee 	bl	8002196 <HAL_GPIO_WritePin>
		if (timer3_flag == 1){ //Turn on index_led-th 7SEG
 80009ba:	4b5d      	ldr	r3, [pc, #372]	; (8000b30 <fsm_manual_run+0x2c4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d139      	bne.n	8000a36 <fsm_manual_run+0x1ca>
			  if (index_7seg >= 4) {
 80009c2:	4b5c      	ldr	r3, [pc, #368]	; (8000b34 <fsm_manual_run+0x2c8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	dd0e      	ble.n	80009e8 <fsm_manual_run+0x17c>
					index_7seg = 0;
 80009ca:	4b5a      	ldr	r3, [pc, #360]	; (8000b34 <fsm_manual_run+0x2c8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
					clock_buffer[0] = 0;
 80009d0:	4b59      	ldr	r3, [pc, #356]	; (8000b38 <fsm_manual_run+0x2cc>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
					update7SEG(index_7seg++);
 80009d6:	4b57      	ldr	r3, [pc, #348]	; (8000b34 <fsm_manual_run+0x2c8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	4955      	ldr	r1, [pc, #340]	; (8000b34 <fsm_manual_run+0x2c8>)
 80009de:	600a      	str	r2, [r1, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fd69 	bl	80014b8 <update7SEG>
 80009e6:	e023      	b.n	8000a30 <fsm_manual_run+0x1c4>
			  } else {
					clock_buffer[1] = 2;
 80009e8:	4b53      	ldr	r3, [pc, #332]	; (8000b38 <fsm_manual_run+0x2cc>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	605a      	str	r2, [r3, #4]
					clock_buffer[2] = traffic_count[0]/10;
 80009ee:	4b53      	ldr	r3, [pc, #332]	; (8000b3c <fsm_manual_run+0x2d0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a54      	ldr	r2, [pc, #336]	; (8000b44 <fsm_manual_run+0x2d8>)
 80009f4:	fb82 1203 	smull	r1, r2, r2, r3
 80009f8:	1092      	asrs	r2, r2, #2
 80009fa:	17db      	asrs	r3, r3, #31
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	4a4e      	ldr	r2, [pc, #312]	; (8000b38 <fsm_manual_run+0x2cc>)
 8000a00:	6093      	str	r3, [r2, #8]
					clock_buffer[3] = traffic_count[0]%10;
 8000a02:	4b4e      	ldr	r3, [pc, #312]	; (8000b3c <fsm_manual_run+0x2d0>)
 8000a04:	6819      	ldr	r1, [r3, #0]
 8000a06:	4b4f      	ldr	r3, [pc, #316]	; (8000b44 <fsm_manual_run+0x2d8>)
 8000a08:	fb83 2301 	smull	r2, r3, r3, r1
 8000a0c:	109a      	asrs	r2, r3, #2
 8000a0e:	17cb      	asrs	r3, r1, #31
 8000a10:	1ad2      	subs	r2, r2, r3
 8000a12:	4613      	mov	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	1aca      	subs	r2, r1, r3
 8000a1c:	4b46      	ldr	r3, [pc, #280]	; (8000b38 <fsm_manual_run+0x2cc>)
 8000a1e:	60da      	str	r2, [r3, #12]
					update7SEG(index_7seg++);
 8000a20:	4b44      	ldr	r3, [pc, #272]	; (8000b34 <fsm_manual_run+0x2c8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	4943      	ldr	r1, [pc, #268]	; (8000b34 <fsm_manual_run+0x2c8>)
 8000a28:	600a      	str	r2, [r1, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fd44 	bl	80014b8 <update7SEG>
				}
			  setTimer3(250);
 8000a30:	20fa      	movs	r0, #250	; 0xfa
 8000a32:	f000 ff71 	bl	8001918 <setTimer3>
		  }

		if (timer1_flag == 1){
 8000a36:	4b44      	ldr	r3, [pc, #272]	; (8000b48 <fsm_manual_run+0x2dc>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d10c      	bne.n	8000a58 <fsm_manual_run+0x1ec>
			HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 8000a3e:	2120      	movs	r1, #32
 8000a40:	483a      	ldr	r0, [pc, #232]	; (8000b2c <fsm_manual_run+0x2c0>)
 8000a42:	f001 fbc0 	bl	80021c6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 8000a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4a:	4838      	ldr	r0, [pc, #224]	; (8000b2c <fsm_manual_run+0x2c0>)
 8000a4c:	f001 fbbb 	bl	80021c6 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000a50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a54:	f000 ff2c 	bl	80018b0 <setTimer1>
		}

		if (isButton1Pressed() == 1){
 8000a58:	f7ff fb78 	bl	800014c <isButton1Pressed>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d102      	bne.n	8000a68 <fsm_manual_run+0x1fc>
			status = MODE_3;
 8000a62:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <fsm_manual_run+0x2bc>)
 8000a64:	220d      	movs	r2, #13
 8000a66:	601a      	str	r2, [r3, #0]
		}
		if (isButton2Pressed() == 1){
 8000a68:	f7ff fb82 	bl	8000170 <isButton2Pressed>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	f040 837f 	bne.w	8001172 <fsm_manual_run+0x906>
			temp = traffic_count[0];
 8000a74:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <fsm_manual_run+0x2d0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a34      	ldr	r2, [pc, #208]	; (8000b4c <fsm_manual_run+0x2e0>)
 8000a7a:	6013      	str	r3, [r2, #0]
			temp++;
 8000a7c:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <fsm_manual_run+0x2e0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a32      	ldr	r2, [pc, #200]	; (8000b4c <fsm_manual_run+0x2e0>)
 8000a84:	6013      	str	r3, [r2, #0]
			if (temp>=100) temp = 0;
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <fsm_manual_run+0x2e0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b63      	cmp	r3, #99	; 0x63
 8000a8c:	dd02      	ble.n	8000a94 <fsm_manual_run+0x228>
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <fsm_manual_run+0x2e0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
			clock_buffer[2] = temp/10;
 8000a94:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <fsm_manual_run+0x2e0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a2a      	ldr	r2, [pc, #168]	; (8000b44 <fsm_manual_run+0x2d8>)
 8000a9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9e:	1092      	asrs	r2, r2, #2
 8000aa0:	17db      	asrs	r3, r3, #31
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <fsm_manual_run+0x2cc>)
 8000aa6:	6093      	str	r3, [r2, #8]
			clock_buffer[3] = temp%10;
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <fsm_manual_run+0x2e0>)
 8000aaa:	6819      	ldr	r1, [r3, #0]
 8000aac:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <fsm_manual_run+0x2d8>)
 8000aae:	fb83 2301 	smull	r2, r3, r3, r1
 8000ab2:	109a      	asrs	r2, r3, #2
 8000ab4:	17cb      	asrs	r3, r1, #31
 8000ab6:	1ad2      	subs	r2, r2, r3
 8000ab8:	4613      	mov	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	1aca      	subs	r2, r1, r3
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <fsm_manual_run+0x2cc>)
 8000ac4:	60da      	str	r2, [r3, #12]
			status = INCR_RED;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <fsm_manual_run+0x2bc>)
 8000ac8:	2215      	movs	r2, #21
 8000aca:	601a      	str	r2, [r3, #0]
		}
		break;
 8000acc:	e351      	b.n	8001172 <fsm_manual_run+0x906>
	case MODE_3:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	4816      	ldr	r0, [pc, #88]	; (8000b2c <fsm_manual_run+0x2c0>)
 8000ad4:	f001 fb5f 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	4813      	ldr	r0, [pc, #76]	; (8000b2c <fsm_manual_run+0x2c0>)
 8000ade:	f001 fb5a 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae8:	4810      	ldr	r0, [pc, #64]	; (8000b2c <fsm_manual_run+0x2c0>)
 8000aea:	f001 fb54 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <fsm_manual_run+0x2c0>)
 8000af6:	f001 fb4e 	bl	8002196 <HAL_GPIO_WritePin>
		if (timer3_flag == 1){ //Turn on index_led-th 7SEG
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <fsm_manual_run+0x2c4>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d14d      	bne.n	8000b9e <fsm_manual_run+0x332>
			  if (index_7seg >= 4) {
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <fsm_manual_run+0x2c8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	dd22      	ble.n	8000b50 <fsm_manual_run+0x2e4>
					index_7seg = 0;
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <fsm_manual_run+0x2c8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
					clock_buffer[0] = 0;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <fsm_manual_run+0x2cc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
					update7SEG(index_7seg++);
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <fsm_manual_run+0x2c8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	4905      	ldr	r1, [pc, #20]	; (8000b34 <fsm_manual_run+0x2c8>)
 8000b1e:	600a      	str	r2, [r1, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fcc9 	bl	80014b8 <update7SEG>
 8000b26:	e037      	b.n	8000b98 <fsm_manual_run+0x32c>
 8000b28:	20000084 	.word	0x20000084
 8000b2c:	40010800 	.word	0x40010800
 8000b30:	200000b4 	.word	0x200000b4
 8000b34:	2000008c 	.word	0x2000008c
 8000b38:	20000090 	.word	0x20000090
 8000b3c:	20000034 	.word	0x20000034
 8000b40:	20000040 	.word	0x20000040
 8000b44:	66666667 	.word	0x66666667
 8000b48:	200000a4 	.word	0x200000a4
 8000b4c:	20000088 	.word	0x20000088
			  } else {
					clock_buffer[1] = 3;
 8000b50:	4ba0      	ldr	r3, [pc, #640]	; (8000dd4 <fsm_manual_run+0x568>)
 8000b52:	2203      	movs	r2, #3
 8000b54:	605a      	str	r2, [r3, #4]
					clock_buffer[2] = traffic_count[1]/10;
 8000b56:	4ba0      	ldr	r3, [pc, #640]	; (8000dd8 <fsm_manual_run+0x56c>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	4aa0      	ldr	r2, [pc, #640]	; (8000ddc <fsm_manual_run+0x570>)
 8000b5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b60:	1092      	asrs	r2, r2, #2
 8000b62:	17db      	asrs	r3, r3, #31
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	4a9b      	ldr	r2, [pc, #620]	; (8000dd4 <fsm_manual_run+0x568>)
 8000b68:	6093      	str	r3, [r2, #8]
					clock_buffer[3] = traffic_count[1]%10;
 8000b6a:	4b9b      	ldr	r3, [pc, #620]	; (8000dd8 <fsm_manual_run+0x56c>)
 8000b6c:	6859      	ldr	r1, [r3, #4]
 8000b6e:	4b9b      	ldr	r3, [pc, #620]	; (8000ddc <fsm_manual_run+0x570>)
 8000b70:	fb83 2301 	smull	r2, r3, r3, r1
 8000b74:	109a      	asrs	r2, r3, #2
 8000b76:	17cb      	asrs	r3, r1, #31
 8000b78:	1ad2      	subs	r2, r2, r3
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	1aca      	subs	r2, r1, r3
 8000b84:	4b93      	ldr	r3, [pc, #588]	; (8000dd4 <fsm_manual_run+0x568>)
 8000b86:	60da      	str	r2, [r3, #12]
					update7SEG(index_7seg++);
 8000b88:	4b95      	ldr	r3, [pc, #596]	; (8000de0 <fsm_manual_run+0x574>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	4994      	ldr	r1, [pc, #592]	; (8000de0 <fsm_manual_run+0x574>)
 8000b90:	600a      	str	r2, [r1, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fc90 	bl	80014b8 <update7SEG>
				}
			  setTimer3(250);
 8000b98:	20fa      	movs	r0, #250	; 0xfa
 8000b9a:	f000 febd 	bl	8001918 <setTimer3>
		  }

		if (timer1_flag == 1){
 8000b9e:	4b91      	ldr	r3, [pc, #580]	; (8000de4 <fsm_manual_run+0x578>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d10c      	bne.n	8000bc0 <fsm_manual_run+0x354>
			HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 8000ba6:	2140      	movs	r1, #64	; 0x40
 8000ba8:	488f      	ldr	r0, [pc, #572]	; (8000de8 <fsm_manual_run+0x57c>)
 8000baa:	f001 fb0c 	bl	80021c6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin);
 8000bae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb2:	488d      	ldr	r0, [pc, #564]	; (8000de8 <fsm_manual_run+0x57c>)
 8000bb4:	f001 fb07 	bl	80021c6 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000bb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bbc:	f000 fe78 	bl	80018b0 <setTimer1>
		}

		if (isButton1Pressed() == 1){
 8000bc0:	f7ff fac4 	bl	800014c <isButton1Pressed>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d102      	bne.n	8000bd0 <fsm_manual_run+0x364>
			status = MODE_4;
 8000bca:	4b88      	ldr	r3, [pc, #544]	; (8000dec <fsm_manual_run+0x580>)
 8000bcc:	220e      	movs	r2, #14
 8000bce:	601a      	str	r2, [r3, #0]
		}
		if (isButton2Pressed() == 1){
 8000bd0:	f7ff face 	bl	8000170 <isButton2Pressed>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	f040 82cd 	bne.w	8001176 <fsm_manual_run+0x90a>
			temp = traffic_count[1];
 8000bdc:	4b7e      	ldr	r3, [pc, #504]	; (8000dd8 <fsm_manual_run+0x56c>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	4a83      	ldr	r2, [pc, #524]	; (8000df0 <fsm_manual_run+0x584>)
 8000be2:	6013      	str	r3, [r2, #0]
			temp++;
 8000be4:	4b82      	ldr	r3, [pc, #520]	; (8000df0 <fsm_manual_run+0x584>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	4a81      	ldr	r2, [pc, #516]	; (8000df0 <fsm_manual_run+0x584>)
 8000bec:	6013      	str	r3, [r2, #0]
			if (temp>=100) temp = 0;
 8000bee:	4b80      	ldr	r3, [pc, #512]	; (8000df0 <fsm_manual_run+0x584>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b63      	cmp	r3, #99	; 0x63
 8000bf4:	dd02      	ble.n	8000bfc <fsm_manual_run+0x390>
 8000bf6:	4b7e      	ldr	r3, [pc, #504]	; (8000df0 <fsm_manual_run+0x584>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
			clock_buffer[2] = temp/10;
 8000bfc:	4b7c      	ldr	r3, [pc, #496]	; (8000df0 <fsm_manual_run+0x584>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a76      	ldr	r2, [pc, #472]	; (8000ddc <fsm_manual_run+0x570>)
 8000c02:	fb82 1203 	smull	r1, r2, r2, r3
 8000c06:	1092      	asrs	r2, r2, #2
 8000c08:	17db      	asrs	r3, r3, #31
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	4a71      	ldr	r2, [pc, #452]	; (8000dd4 <fsm_manual_run+0x568>)
 8000c0e:	6093      	str	r3, [r2, #8]
			clock_buffer[3] = temp%10;
 8000c10:	4b77      	ldr	r3, [pc, #476]	; (8000df0 <fsm_manual_run+0x584>)
 8000c12:	6819      	ldr	r1, [r3, #0]
 8000c14:	4b71      	ldr	r3, [pc, #452]	; (8000ddc <fsm_manual_run+0x570>)
 8000c16:	fb83 2301 	smull	r2, r3, r3, r1
 8000c1a:	109a      	asrs	r2, r3, #2
 8000c1c:	17cb      	asrs	r3, r1, #31
 8000c1e:	1ad2      	subs	r2, r2, r3
 8000c20:	4613      	mov	r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	4413      	add	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	1aca      	subs	r2, r1, r3
 8000c2a:	4b6a      	ldr	r3, [pc, #424]	; (8000dd4 <fsm_manual_run+0x568>)
 8000c2c:	60da      	str	r2, [r3, #12]
			status = INCR_YELLOW;
 8000c2e:	4b6f      	ldr	r3, [pc, #444]	; (8000dec <fsm_manual_run+0x580>)
 8000c30:	2216      	movs	r2, #22
 8000c32:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c34:	e29f      	b.n	8001176 <fsm_manual_run+0x90a>
	case MODE_4:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2120      	movs	r1, #32
 8000c3a:	486b      	ldr	r0, [pc, #428]	; (8000de8 <fsm_manual_run+0x57c>)
 8000c3c:	f001 faab 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2140      	movs	r1, #64	; 0x40
 8000c44:	4868      	ldr	r0, [pc, #416]	; (8000de8 <fsm_manual_run+0x57c>)
 8000c46:	f001 faa6 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c50:	4865      	ldr	r0, [pc, #404]	; (8000de8 <fsm_manual_run+0x57c>)
 8000c52:	f001 faa0 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5c:	4862      	ldr	r0, [pc, #392]	; (8000de8 <fsm_manual_run+0x57c>)
 8000c5e:	f001 fa9a 	bl	8002196 <HAL_GPIO_WritePin>
		if (timer3_flag == 1){ //Turn on index_led-th 7SEG
 8000c62:	4b64      	ldr	r3, [pc, #400]	; (8000df4 <fsm_manual_run+0x588>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d139      	bne.n	8000cde <fsm_manual_run+0x472>
			  if (index_7seg >= 4) {
 8000c6a:	4b5d      	ldr	r3, [pc, #372]	; (8000de0 <fsm_manual_run+0x574>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	dd0e      	ble.n	8000c90 <fsm_manual_run+0x424>
					index_7seg = 0;
 8000c72:	4b5b      	ldr	r3, [pc, #364]	; (8000de0 <fsm_manual_run+0x574>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
					clock_buffer[0] = 0;
 8000c78:	4b56      	ldr	r3, [pc, #344]	; (8000dd4 <fsm_manual_run+0x568>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
					update7SEG(index_7seg++);
 8000c7e:	4b58      	ldr	r3, [pc, #352]	; (8000de0 <fsm_manual_run+0x574>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	4956      	ldr	r1, [pc, #344]	; (8000de0 <fsm_manual_run+0x574>)
 8000c86:	600a      	str	r2, [r1, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 fc15 	bl	80014b8 <update7SEG>
 8000c8e:	e023      	b.n	8000cd8 <fsm_manual_run+0x46c>
			  } else {
					clock_buffer[1] = 4;
 8000c90:	4b50      	ldr	r3, [pc, #320]	; (8000dd4 <fsm_manual_run+0x568>)
 8000c92:	2204      	movs	r2, #4
 8000c94:	605a      	str	r2, [r3, #4]
					clock_buffer[2] = traffic_count[2]/10;
 8000c96:	4b50      	ldr	r3, [pc, #320]	; (8000dd8 <fsm_manual_run+0x56c>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	4a50      	ldr	r2, [pc, #320]	; (8000ddc <fsm_manual_run+0x570>)
 8000c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca0:	1092      	asrs	r2, r2, #2
 8000ca2:	17db      	asrs	r3, r3, #31
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	4a4b      	ldr	r2, [pc, #300]	; (8000dd4 <fsm_manual_run+0x568>)
 8000ca8:	6093      	str	r3, [r2, #8]
					clock_buffer[3] = traffic_count[2]%10;
 8000caa:	4b4b      	ldr	r3, [pc, #300]	; (8000dd8 <fsm_manual_run+0x56c>)
 8000cac:	6899      	ldr	r1, [r3, #8]
 8000cae:	4b4b      	ldr	r3, [pc, #300]	; (8000ddc <fsm_manual_run+0x570>)
 8000cb0:	fb83 2301 	smull	r2, r3, r3, r1
 8000cb4:	109a      	asrs	r2, r3, #2
 8000cb6:	17cb      	asrs	r3, r1, #31
 8000cb8:	1ad2      	subs	r2, r2, r3
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	1aca      	subs	r2, r1, r3
 8000cc4:	4b43      	ldr	r3, [pc, #268]	; (8000dd4 <fsm_manual_run+0x568>)
 8000cc6:	60da      	str	r2, [r3, #12]
					update7SEG(index_7seg++);
 8000cc8:	4b45      	ldr	r3, [pc, #276]	; (8000de0 <fsm_manual_run+0x574>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	4944      	ldr	r1, [pc, #272]	; (8000de0 <fsm_manual_run+0x574>)
 8000cd0:	600a      	str	r2, [r1, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fbf0 	bl	80014b8 <update7SEG>
				}
			  setTimer3(250);
 8000cd8:	20fa      	movs	r0, #250	; 0xfa
 8000cda:	f000 fe1d 	bl	8001918 <setTimer3>
		  }

		if (timer1_flag == 1){
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <fsm_manual_run+0x578>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d10c      	bne.n	8000d00 <fsm_manual_run+0x494>
			HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 8000ce6:	2180      	movs	r1, #128	; 0x80
 8000ce8:	483f      	ldr	r0, [pc, #252]	; (8000de8 <fsm_manual_run+0x57c>)
 8000cea:	f001 fa6c 	bl	80021c6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 8000cee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf2:	483d      	ldr	r0, [pc, #244]	; (8000de8 <fsm_manual_run+0x57c>)
 8000cf4:	f001 fa67 	bl	80021c6 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000cf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfc:	f000 fdd8 	bl	80018b0 <setTimer1>
		}

		if (isButton1Pressed() == 1){
 8000d00:	f7ff fa24 	bl	800014c <isButton1Pressed>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d104      	bne.n	8000d14 <fsm_manual_run+0x4a8>
			status = MODE_1;
 8000d0a:	4b38      	ldr	r3, [pc, #224]	; (8000dec <fsm_manual_run+0x580>)
 8000d0c:	220b      	movs	r2, #11
 8000d0e:	601a      	str	r2, [r3, #0]
			isButton3Pressed();
 8000d10:	f7ff fa40 	bl	8000194 <isButton3Pressed>
		}
		if (isButton2Pressed() == 1){
 8000d14:	f7ff fa2c 	bl	8000170 <isButton2Pressed>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	f040 822d 	bne.w	800117a <fsm_manual_run+0x90e>
			temp = traffic_count[2];
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <fsm_manual_run+0x56c>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	4a32      	ldr	r2, [pc, #200]	; (8000df0 <fsm_manual_run+0x584>)
 8000d26:	6013      	str	r3, [r2, #0]
			temp++;
 8000d28:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <fsm_manual_run+0x584>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	4a30      	ldr	r2, [pc, #192]	; (8000df0 <fsm_manual_run+0x584>)
 8000d30:	6013      	str	r3, [r2, #0]
			if (temp>=100) temp = 0;
 8000d32:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <fsm_manual_run+0x584>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b63      	cmp	r3, #99	; 0x63
 8000d38:	dd02      	ble.n	8000d40 <fsm_manual_run+0x4d4>
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <fsm_manual_run+0x584>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
			clock_buffer[2] = temp/10;
 8000d40:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <fsm_manual_run+0x584>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a25      	ldr	r2, [pc, #148]	; (8000ddc <fsm_manual_run+0x570>)
 8000d46:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4a:	1092      	asrs	r2, r2, #2
 8000d4c:	17db      	asrs	r3, r3, #31
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <fsm_manual_run+0x568>)
 8000d52:	6093      	str	r3, [r2, #8]
			clock_buffer[3] = temp%10;
 8000d54:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <fsm_manual_run+0x584>)
 8000d56:	6819      	ldr	r1, [r3, #0]
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <fsm_manual_run+0x570>)
 8000d5a:	fb83 2301 	smull	r2, r3, r3, r1
 8000d5e:	109a      	asrs	r2, r3, #2
 8000d60:	17cb      	asrs	r3, r1, #31
 8000d62:	1ad2      	subs	r2, r2, r3
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	1aca      	subs	r2, r1, r3
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <fsm_manual_run+0x568>)
 8000d70:	60da      	str	r2, [r3, #12]
			status = INCR_GREEN;
 8000d72:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <fsm_manual_run+0x580>)
 8000d74:	2217      	movs	r2, #23
 8000d76:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d78:	e1ff      	b.n	800117a <fsm_manual_run+0x90e>
	case INCR_RED:
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2140      	movs	r1, #64	; 0x40
 8000d7e:	481a      	ldr	r0, [pc, #104]	; (8000de8 <fsm_manual_run+0x57c>)
 8000d80:	f001 fa09 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	4817      	ldr	r0, [pc, #92]	; (8000de8 <fsm_manual_run+0x57c>)
 8000d8a:	f001 fa04 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d94:	4814      	ldr	r0, [pc, #80]	; (8000de8 <fsm_manual_run+0x57c>)
 8000d96:	f001 f9fe 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da0:	4811      	ldr	r0, [pc, #68]	; (8000de8 <fsm_manual_run+0x57c>)
 8000da2:	f001 f9f8 	bl	8002196 <HAL_GPIO_WritePin>
		if (timer3_flag == 1){ //Turn on index_led-th 7SEG
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <fsm_manual_run+0x588>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d132      	bne.n	8000e14 <fsm_manual_run+0x5a8>
			  if (index_7seg >= 4) {
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <fsm_manual_run+0x574>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	dd20      	ble.n	8000df8 <fsm_manual_run+0x58c>
					index_7seg = 0;
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <fsm_manual_run+0x574>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
					clock_buffer[0] = 0;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <fsm_manual_run+0x568>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
					update7SEG(index_7seg++);
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <fsm_manual_run+0x574>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	4905      	ldr	r1, [pc, #20]	; (8000de0 <fsm_manual_run+0x574>)
 8000dca:	600a      	str	r2, [r1, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fb73 	bl	80014b8 <update7SEG>
 8000dd2:	e01c      	b.n	8000e0e <fsm_manual_run+0x5a2>
 8000dd4:	20000090 	.word	0x20000090
 8000dd8:	20000034 	.word	0x20000034
 8000ddc:	66666667 	.word	0x66666667
 8000de0:	2000008c 	.word	0x2000008c
 8000de4:	200000a4 	.word	0x200000a4
 8000de8:	40010800 	.word	0x40010800
 8000dec:	20000084 	.word	0x20000084
 8000df0:	20000088 	.word	0x20000088
 8000df4:	200000b4 	.word	0x200000b4
			  } else {
					clock_buffer[1] = 2;
 8000df8:	4b9b      	ldr	r3, [pc, #620]	; (8001068 <fsm_manual_run+0x7fc>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	605a      	str	r2, [r3, #4]
					update7SEG(index_7seg++);
 8000dfe:	4b9b      	ldr	r3, [pc, #620]	; (800106c <fsm_manual_run+0x800>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	4999      	ldr	r1, [pc, #612]	; (800106c <fsm_manual_run+0x800>)
 8000e06:	600a      	str	r2, [r1, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fb55 	bl	80014b8 <update7SEG>
				}
			  setTimer3(250);
 8000e0e:	20fa      	movs	r0, #250	; 0xfa
 8000e10:	f000 fd82 	bl	8001918 <setTimer3>
		  }

		if (timer1_flag == 1){
 8000e14:	4b96      	ldr	r3, [pc, #600]	; (8001070 <fsm_manual_run+0x804>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d10c      	bne.n	8000e36 <fsm_manual_run+0x5ca>
			HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	4895      	ldr	r0, [pc, #596]	; (8001074 <fsm_manual_run+0x808>)
 8000e20:	f001 f9d1 	bl	80021c6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 8000e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e28:	4892      	ldr	r0, [pc, #584]	; (8001074 <fsm_manual_run+0x808>)
 8000e2a:	f001 f9cc 	bl	80021c6 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000e2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e32:	f000 fd3d 	bl	80018b0 <setTimer1>
		}

		if (isButton1Pressed() == 1){
 8000e36:	f7ff f989 	bl	800014c <isButton1Pressed>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d102      	bne.n	8000e46 <fsm_manual_run+0x5da>
			status = MODE_3;
 8000e40:	4b8d      	ldr	r3, [pc, #564]	; (8001078 <fsm_manual_run+0x80c>)
 8000e42:	220d      	movs	r2, #13
 8000e44:	601a      	str	r2, [r3, #0]
		}
		if (isButton2Pressed() == 1){
 8000e46:	f7ff f993 	bl	8000170 <isButton2Pressed>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d127      	bne.n	8000ea0 <fsm_manual_run+0x634>
			temp++;
 8000e50:	4b8a      	ldr	r3, [pc, #552]	; (800107c <fsm_manual_run+0x810>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	4a89      	ldr	r2, [pc, #548]	; (800107c <fsm_manual_run+0x810>)
 8000e58:	6013      	str	r3, [r2, #0]
			if (temp>=100) temp = 0;
 8000e5a:	4b88      	ldr	r3, [pc, #544]	; (800107c <fsm_manual_run+0x810>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b63      	cmp	r3, #99	; 0x63
 8000e60:	dd02      	ble.n	8000e68 <fsm_manual_run+0x5fc>
 8000e62:	4b86      	ldr	r3, [pc, #536]	; (800107c <fsm_manual_run+0x810>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
			clock_buffer[2] = temp/10;
 8000e68:	4b84      	ldr	r3, [pc, #528]	; (800107c <fsm_manual_run+0x810>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a84      	ldr	r2, [pc, #528]	; (8001080 <fsm_manual_run+0x814>)
 8000e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e72:	1092      	asrs	r2, r2, #2
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4a7b      	ldr	r2, [pc, #492]	; (8001068 <fsm_manual_run+0x7fc>)
 8000e7a:	6093      	str	r3, [r2, #8]
			clock_buffer[3] = temp%10;
 8000e7c:	4b7f      	ldr	r3, [pc, #508]	; (800107c <fsm_manual_run+0x810>)
 8000e7e:	6819      	ldr	r1, [r3, #0]
 8000e80:	4b7f      	ldr	r3, [pc, #508]	; (8001080 <fsm_manual_run+0x814>)
 8000e82:	fb83 2301 	smull	r2, r3, r3, r1
 8000e86:	109a      	asrs	r2, r3, #2
 8000e88:	17cb      	asrs	r3, r1, #31
 8000e8a:	1ad2      	subs	r2, r2, r3
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	1aca      	subs	r2, r1, r3
 8000e96:	4b74      	ldr	r3, [pc, #464]	; (8001068 <fsm_manual_run+0x7fc>)
 8000e98:	60da      	str	r2, [r3, #12]
			status = INCR_RED;
 8000e9a:	4b77      	ldr	r3, [pc, #476]	; (8001078 <fsm_manual_run+0x80c>)
 8000e9c:	2215      	movs	r2, #21
 8000e9e:	601a      	str	r2, [r3, #0]
		}
		if (isButton3Pressed() == 1){
 8000ea0:	f7ff f978 	bl	8000194 <isButton3Pressed>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	f040 8169 	bne.w	800117e <fsm_manual_run+0x912>
			status = MODE_2;
 8000eac:	4b72      	ldr	r3, [pc, #456]	; (8001078 <fsm_manual_run+0x80c>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	601a      	str	r2, [r3, #0]
			if (temp > traffic_count[1]){
 8000eb2:	4b74      	ldr	r3, [pc, #464]	; (8001084 <fsm_manual_run+0x818>)
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	4b71      	ldr	r3, [pc, #452]	; (800107c <fsm_manual_run+0x810>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	f280 815f 	bge.w	800117e <fsm_manual_run+0x912>
				traffic_count[0] = temp;
 8000ec0:	4b6e      	ldr	r3, [pc, #440]	; (800107c <fsm_manual_run+0x810>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a6f      	ldr	r2, [pc, #444]	; (8001084 <fsm_manual_run+0x818>)
 8000ec6:	6013      	str	r3, [r2, #0]
				traffic_count[2] = traffic_count[0] - traffic_count[1];
 8000ec8:	4b6e      	ldr	r3, [pc, #440]	; (8001084 <fsm_manual_run+0x818>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b6d      	ldr	r3, [pc, #436]	; (8001084 <fsm_manual_run+0x818>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	4a6c      	ldr	r2, [pc, #432]	; (8001084 <fsm_manual_run+0x818>)
 8000ed4:	6093      	str	r3, [r2, #8]
			}
		}
		break;
 8000ed6:	e152      	b.n	800117e <fsm_manual_run+0x912>
	case INCR_YELLOW:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2120      	movs	r1, #32
 8000edc:	4865      	ldr	r0, [pc, #404]	; (8001074 <fsm_manual_run+0x808>)
 8000ede:	f001 f95a 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	4863      	ldr	r0, [pc, #396]	; (8001074 <fsm_manual_run+0x808>)
 8000ee8:	f001 f955 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef2:	4860      	ldr	r0, [pc, #384]	; (8001074 <fsm_manual_run+0x808>)
 8000ef4:	f001 f94f 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efe:	485d      	ldr	r0, [pc, #372]	; (8001074 <fsm_manual_run+0x808>)
 8000f00:	f001 f949 	bl	8002196 <HAL_GPIO_WritePin>
		if (timer3_flag == 1){ //Turn on index_led-th 7SEG
 8000f04:	4b60      	ldr	r3, [pc, #384]	; (8001088 <fsm_manual_run+0x81c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d120      	bne.n	8000f4e <fsm_manual_run+0x6e2>
			  if (index_7seg >= 4) {
 8000f0c:	4b57      	ldr	r3, [pc, #348]	; (800106c <fsm_manual_run+0x800>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	dd0e      	ble.n	8000f32 <fsm_manual_run+0x6c6>
					index_7seg = 0;
 8000f14:	4b55      	ldr	r3, [pc, #340]	; (800106c <fsm_manual_run+0x800>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
					clock_buffer[0] = 0;
 8000f1a:	4b53      	ldr	r3, [pc, #332]	; (8001068 <fsm_manual_run+0x7fc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
					update7SEG(index_7seg++);
 8000f20:	4b52      	ldr	r3, [pc, #328]	; (800106c <fsm_manual_run+0x800>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	4951      	ldr	r1, [pc, #324]	; (800106c <fsm_manual_run+0x800>)
 8000f28:	600a      	str	r2, [r1, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fac4 	bl	80014b8 <update7SEG>
 8000f30:	e00a      	b.n	8000f48 <fsm_manual_run+0x6dc>
			  } else {
					clock_buffer[1] = 3;
 8000f32:	4b4d      	ldr	r3, [pc, #308]	; (8001068 <fsm_manual_run+0x7fc>)
 8000f34:	2203      	movs	r2, #3
 8000f36:	605a      	str	r2, [r3, #4]
					update7SEG(index_7seg++);
 8000f38:	4b4c      	ldr	r3, [pc, #304]	; (800106c <fsm_manual_run+0x800>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	494b      	ldr	r1, [pc, #300]	; (800106c <fsm_manual_run+0x800>)
 8000f40:	600a      	str	r2, [r1, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fab8 	bl	80014b8 <update7SEG>
				}
			  setTimer3(250);
 8000f48:	20fa      	movs	r0, #250	; 0xfa
 8000f4a:	f000 fce5 	bl	8001918 <setTimer3>
		  }

		if (timer1_flag == 1){
 8000f4e:	4b48      	ldr	r3, [pc, #288]	; (8001070 <fsm_manual_run+0x804>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d10c      	bne.n	8000f70 <fsm_manual_run+0x704>
			HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	4846      	ldr	r0, [pc, #280]	; (8001074 <fsm_manual_run+0x808>)
 8000f5a:	f001 f934 	bl	80021c6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin);
 8000f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f62:	4844      	ldr	r0, [pc, #272]	; (8001074 <fsm_manual_run+0x808>)
 8000f64:	f001 f92f 	bl	80021c6 <HAL_GPIO_TogglePin>
			setTimer1(500);
 8000f68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f6c:	f000 fca0 	bl	80018b0 <setTimer1>
		}

		if (isButton1Pressed() == 1){
 8000f70:	f7ff f8ec 	bl	800014c <isButton1Pressed>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d102      	bne.n	8000f80 <fsm_manual_run+0x714>
			status = MODE_4;
 8000f7a:	4b3f      	ldr	r3, [pc, #252]	; (8001078 <fsm_manual_run+0x80c>)
 8000f7c:	220e      	movs	r2, #14
 8000f7e:	601a      	str	r2, [r3, #0]
		}
		if (isButton2Pressed() == 1){
 8000f80:	f7ff f8f6 	bl	8000170 <isButton2Pressed>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d127      	bne.n	8000fda <fsm_manual_run+0x76e>
			temp++;
 8000f8a:	4b3c      	ldr	r3, [pc, #240]	; (800107c <fsm_manual_run+0x810>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a3a      	ldr	r2, [pc, #232]	; (800107c <fsm_manual_run+0x810>)
 8000f92:	6013      	str	r3, [r2, #0]
			if (temp>=100) temp = 0;
 8000f94:	4b39      	ldr	r3, [pc, #228]	; (800107c <fsm_manual_run+0x810>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b63      	cmp	r3, #99	; 0x63
 8000f9a:	dd02      	ble.n	8000fa2 <fsm_manual_run+0x736>
 8000f9c:	4b37      	ldr	r3, [pc, #220]	; (800107c <fsm_manual_run+0x810>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
			clock_buffer[2] = temp/10;
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <fsm_manual_run+0x810>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a36      	ldr	r2, [pc, #216]	; (8001080 <fsm_manual_run+0x814>)
 8000fa8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fac:	1092      	asrs	r2, r2, #2
 8000fae:	17db      	asrs	r3, r3, #31
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	4a2d      	ldr	r2, [pc, #180]	; (8001068 <fsm_manual_run+0x7fc>)
 8000fb4:	6093      	str	r3, [r2, #8]
			clock_buffer[3] = temp%10;
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <fsm_manual_run+0x810>)
 8000fb8:	6819      	ldr	r1, [r3, #0]
 8000fba:	4b31      	ldr	r3, [pc, #196]	; (8001080 <fsm_manual_run+0x814>)
 8000fbc:	fb83 2301 	smull	r2, r3, r3, r1
 8000fc0:	109a      	asrs	r2, r3, #2
 8000fc2:	17cb      	asrs	r3, r1, #31
 8000fc4:	1ad2      	subs	r2, r2, r3
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	1aca      	subs	r2, r1, r3
 8000fd0:	4b25      	ldr	r3, [pc, #148]	; (8001068 <fsm_manual_run+0x7fc>)
 8000fd2:	60da      	str	r2, [r3, #12]
			status = INCR_YELLOW;
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <fsm_manual_run+0x80c>)
 8000fd6:	2216      	movs	r2, #22
 8000fd8:	601a      	str	r2, [r3, #0]
		}
		if (isButton3Pressed() == 1){
 8000fda:	f7ff f8db 	bl	8000194 <isButton3Pressed>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	f040 80ce 	bne.w	8001182 <fsm_manual_run+0x916>
			status = MODE_3;
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <fsm_manual_run+0x80c>)
 8000fe8:	220d      	movs	r2, #13
 8000fea:	601a      	str	r2, [r3, #0]
			if (temp <= 5){
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <fsm_manual_run+0x810>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	f300 80c6 	bgt.w	8001182 <fsm_manual_run+0x916>
				traffic_count[1] = temp;
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <fsm_manual_run+0x810>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <fsm_manual_run+0x818>)
 8000ffc:	6053      	str	r3, [r2, #4]
				traffic_count[0] = traffic_count[1] + traffic_count[2];
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <fsm_manual_run+0x818>)
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <fsm_manual_run+0x818>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	4413      	add	r3, r2
 8001008:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <fsm_manual_run+0x818>)
 800100a:	6013      	str	r3, [r2, #0]
			}
		}
		break;
 800100c:	e0b9      	b.n	8001182 <fsm_manual_run+0x916>
	case INCR_GREEN:
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2120      	movs	r1, #32
 8001012:	4818      	ldr	r0, [pc, #96]	; (8001074 <fsm_manual_run+0x808>)
 8001014:	f001 f8bf 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2140      	movs	r1, #64	; 0x40
 800101c:	4815      	ldr	r0, [pc, #84]	; (8001074 <fsm_manual_run+0x808>)
 800101e:	f001 f8ba 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001028:	4812      	ldr	r0, [pc, #72]	; (8001074 <fsm_manual_run+0x808>)
 800102a:	f001 f8b4 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001034:	480f      	ldr	r0, [pc, #60]	; (8001074 <fsm_manual_run+0x808>)
 8001036:	f001 f8ae 	bl	8002196 <HAL_GPIO_WritePin>
		if (timer3_flag == 1){ //Turn on index_led-th 7SEG
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <fsm_manual_run+0x81c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d132      	bne.n	80010a8 <fsm_manual_run+0x83c>
			  if (index_7seg >= 4) {
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <fsm_manual_run+0x800>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b03      	cmp	r3, #3
 8001048:	dd20      	ble.n	800108c <fsm_manual_run+0x820>
					index_7seg = 0;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <fsm_manual_run+0x800>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
					clock_buffer[0] = 0;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <fsm_manual_run+0x7fc>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
					update7SEG(index_7seg++);
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <fsm_manual_run+0x800>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	4903      	ldr	r1, [pc, #12]	; (800106c <fsm_manual_run+0x800>)
 800105e:	600a      	str	r2, [r1, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fa29 	bl	80014b8 <update7SEG>
 8001066:	e01c      	b.n	80010a2 <fsm_manual_run+0x836>
 8001068:	20000090 	.word	0x20000090
 800106c:	2000008c 	.word	0x2000008c
 8001070:	200000a4 	.word	0x200000a4
 8001074:	40010800 	.word	0x40010800
 8001078:	20000084 	.word	0x20000084
 800107c:	20000088 	.word	0x20000088
 8001080:	66666667 	.word	0x66666667
 8001084:	20000034 	.word	0x20000034
 8001088:	200000b4 	.word	0x200000b4
			  } else {
					clock_buffer[1] = 4;
 800108c:	4b3f      	ldr	r3, [pc, #252]	; (800118c <fsm_manual_run+0x920>)
 800108e:	2204      	movs	r2, #4
 8001090:	605a      	str	r2, [r3, #4]
					update7SEG(index_7seg++);
 8001092:	4b3f      	ldr	r3, [pc, #252]	; (8001190 <fsm_manual_run+0x924>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	493d      	ldr	r1, [pc, #244]	; (8001190 <fsm_manual_run+0x924>)
 800109a:	600a      	str	r2, [r1, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fa0b 	bl	80014b8 <update7SEG>
				}
			  setTimer3(250);
 80010a2:	20fa      	movs	r0, #250	; 0xfa
 80010a4:	f000 fc38 	bl	8001918 <setTimer3>
		  }

		if (timer1_flag == 1){
 80010a8:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <fsm_manual_run+0x928>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d10c      	bne.n	80010ca <fsm_manual_run+0x85e>
			HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	4839      	ldr	r0, [pc, #228]	; (8001198 <fsm_manual_run+0x92c>)
 80010b4:	f001 f887 	bl	80021c6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 80010b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010bc:	4836      	ldr	r0, [pc, #216]	; (8001198 <fsm_manual_run+0x92c>)
 80010be:	f001 f882 	bl	80021c6 <HAL_GPIO_TogglePin>
			setTimer1(500);
 80010c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010c6:	f000 fbf3 	bl	80018b0 <setTimer1>
		}

		if (isButton1Pressed() == 1){
 80010ca:	f7ff f83f 	bl	800014c <isButton1Pressed>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d102      	bne.n	80010da <fsm_manual_run+0x86e>
			status = MODE_1;
 80010d4:	4b31      	ldr	r3, [pc, #196]	; (800119c <fsm_manual_run+0x930>)
 80010d6:	220b      	movs	r2, #11
 80010d8:	601a      	str	r2, [r3, #0]
		}
		if (isButton2Pressed() == 1){
 80010da:	f7ff f849 	bl	8000170 <isButton2Pressed>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d127      	bne.n	8001134 <fsm_manual_run+0x8c8>
			temp++;
 80010e4:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <fsm_manual_run+0x934>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a2d      	ldr	r2, [pc, #180]	; (80011a0 <fsm_manual_run+0x934>)
 80010ec:	6013      	str	r3, [r2, #0]
			if (temp>=100) temp = 0;
 80010ee:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <fsm_manual_run+0x934>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b63      	cmp	r3, #99	; 0x63
 80010f4:	dd02      	ble.n	80010fc <fsm_manual_run+0x890>
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <fsm_manual_run+0x934>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
			clock_buffer[2] = temp/10;
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <fsm_manual_run+0x934>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a28      	ldr	r2, [pc, #160]	; (80011a4 <fsm_manual_run+0x938>)
 8001102:	fb82 1203 	smull	r1, r2, r2, r3
 8001106:	1092      	asrs	r2, r2, #2
 8001108:	17db      	asrs	r3, r3, #31
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	4a1f      	ldr	r2, [pc, #124]	; (800118c <fsm_manual_run+0x920>)
 800110e:	6093      	str	r3, [r2, #8]
			clock_buffer[3] = temp%10;
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <fsm_manual_run+0x934>)
 8001112:	6819      	ldr	r1, [r3, #0]
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <fsm_manual_run+0x938>)
 8001116:	fb83 2301 	smull	r2, r3, r3, r1
 800111a:	109a      	asrs	r2, r3, #2
 800111c:	17cb      	asrs	r3, r1, #31
 800111e:	1ad2      	subs	r2, r2, r3
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	1aca      	subs	r2, r1, r3
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <fsm_manual_run+0x920>)
 800112c:	60da      	str	r2, [r3, #12]
			status = INCR_GREEN;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <fsm_manual_run+0x930>)
 8001130:	2217      	movs	r2, #23
 8001132:	601a      	str	r2, [r3, #0]
		}
		if (isButton3Pressed() == 1){
 8001134:	f7ff f82e 	bl	8000194 <isButton3Pressed>
 8001138:	4603      	mov	r3, r0
 800113a:	2b01      	cmp	r3, #1
 800113c:	d123      	bne.n	8001186 <fsm_manual_run+0x91a>
			status = MODE_4;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <fsm_manual_run+0x930>)
 8001140:	220e      	movs	r2, #14
 8001142:	601a      	str	r2, [r3, #0]
			if (temp + traffic_count[1] <= 99){
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <fsm_manual_run+0x93c>)
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <fsm_manual_run+0x934>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4413      	add	r3, r2
 800114e:	2b63      	cmp	r3, #99	; 0x63
 8001150:	dc19      	bgt.n	8001186 <fsm_manual_run+0x91a>
				traffic_count[2] = temp;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <fsm_manual_run+0x934>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <fsm_manual_run+0x93c>)
 8001158:	6093      	str	r3, [r2, #8]
				traffic_count[0] = traffic_count[1] + traffic_count[2];
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <fsm_manual_run+0x93c>)
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <fsm_manual_run+0x93c>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	4413      	add	r3, r2
 8001164:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <fsm_manual_run+0x93c>)
 8001166:	6013      	str	r3, [r2, #0]
			}
		}
		break;
 8001168:	e00d      	b.n	8001186 <fsm_manual_run+0x91a>
	default:
		break;
 800116a:	bf00      	nop
 800116c:	e00c      	b.n	8001188 <fsm_manual_run+0x91c>
		break;
 800116e:	bf00      	nop
 8001170:	e00a      	b.n	8001188 <fsm_manual_run+0x91c>
		break;
 8001172:	bf00      	nop
 8001174:	e008      	b.n	8001188 <fsm_manual_run+0x91c>
		break;
 8001176:	bf00      	nop
 8001178:	e006      	b.n	8001188 <fsm_manual_run+0x91c>
		break;
 800117a:	bf00      	nop
 800117c:	e004      	b.n	8001188 <fsm_manual_run+0x91c>
		break;
 800117e:	bf00      	nop
 8001180:	e002      	b.n	8001188 <fsm_manual_run+0x91c>
		break;
 8001182:	bf00      	nop
 8001184:	e000      	b.n	8001188 <fsm_manual_run+0x91c>
		break;
 8001186:	bf00      	nop
	}
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000090 	.word	0x20000090
 8001190:	2000008c 	.word	0x2000008c
 8001194:	200000a4 	.word	0x200000a4
 8001198:	40010800 	.word	0x40010800
 800119c:	20000084 	.word	0x20000084
 80011a0:	20000088 	.word	0x20000088
 80011a4:	66666667 	.word	0x66666667
 80011a8:	20000034 	.word	0x20000034

080011ac <display7segment>:
int index_7seg = 0;
int traffic_count[3] = {5,2,3};
int count[3] = {5,2,3};
int clock_buffer[4] = {0, 0, 0, 0};

void display7segment(int num){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	if (num == 0){
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d122      	bne.n	8001200 <display7segment+0x54>
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2101      	movs	r1, #1
 80011be:	48bd      	ldr	r0, [pc, #756]	; (80014b4 <display7segment+0x308>)
 80011c0:	f000 ffe9 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2102      	movs	r1, #2
 80011c8:	48ba      	ldr	r0, [pc, #744]	; (80014b4 <display7segment+0x308>)
 80011ca:	f000 ffe4 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2104      	movs	r1, #4
 80011d2:	48b8      	ldr	r0, [pc, #736]	; (80014b4 <display7segment+0x308>)
 80011d4:	f000 ffdf 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2108      	movs	r1, #8
 80011dc:	48b5      	ldr	r0, [pc, #724]	; (80014b4 <display7segment+0x308>)
 80011de:	f000 ffda 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2110      	movs	r1, #16
 80011e6:	48b3      	ldr	r0, [pc, #716]	; (80014b4 <display7segment+0x308>)
 80011e8:	f000 ffd5 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2120      	movs	r1, #32
 80011f0:	48b0      	ldr	r0, [pc, #704]	; (80014b4 <display7segment+0x308>)
 80011f2:	f000 ffd0 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2140      	movs	r1, #64	; 0x40
 80011fa:	48ae      	ldr	r0, [pc, #696]	; (80014b4 <display7segment+0x308>)
 80011fc:	f000 ffcb 	bl	8002196 <HAL_GPIO_WritePin>
	}
	if (num == 1){
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d122      	bne.n	800124c <display7segment+0xa0>
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2101      	movs	r1, #1
 800120a:	48aa      	ldr	r0, [pc, #680]	; (80014b4 <display7segment+0x308>)
 800120c:	f000 ffc3 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2102      	movs	r1, #2
 8001214:	48a7      	ldr	r0, [pc, #668]	; (80014b4 <display7segment+0x308>)
 8001216:	f000 ffbe 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2104      	movs	r1, #4
 800121e:	48a5      	ldr	r0, [pc, #660]	; (80014b4 <display7segment+0x308>)
 8001220:	f000 ffb9 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2108      	movs	r1, #8
 8001228:	48a2      	ldr	r0, [pc, #648]	; (80014b4 <display7segment+0x308>)
 800122a:	f000 ffb4 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800122e:	2201      	movs	r2, #1
 8001230:	2110      	movs	r1, #16
 8001232:	48a0      	ldr	r0, [pc, #640]	; (80014b4 <display7segment+0x308>)
 8001234:	f000 ffaf 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2120      	movs	r1, #32
 800123c:	489d      	ldr	r0, [pc, #628]	; (80014b4 <display7segment+0x308>)
 800123e:	f000 ffaa 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8001242:	2201      	movs	r2, #1
 8001244:	2140      	movs	r1, #64	; 0x40
 8001246:	489b      	ldr	r0, [pc, #620]	; (80014b4 <display7segment+0x308>)
 8001248:	f000 ffa5 	bl	8002196 <HAL_GPIO_WritePin>
		}
	if (num == 2){
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d122      	bne.n	8001298 <display7segment+0xec>
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2101      	movs	r1, #1
 8001256:	4897      	ldr	r0, [pc, #604]	; (80014b4 <display7segment+0x308>)
 8001258:	f000 ff9d 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2102      	movs	r1, #2
 8001260:	4894      	ldr	r0, [pc, #592]	; (80014b4 <display7segment+0x308>)
 8001262:	f000 ff98 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, SET);
 8001266:	2201      	movs	r2, #1
 8001268:	2104      	movs	r1, #4
 800126a:	4892      	ldr	r0, [pc, #584]	; (80014b4 <display7segment+0x308>)
 800126c:	f000 ff93 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2108      	movs	r1, #8
 8001274:	488f      	ldr	r0, [pc, #572]	; (80014b4 <display7segment+0x308>)
 8001276:	f000 ff8e 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2110      	movs	r1, #16
 800127e:	488d      	ldr	r0, [pc, #564]	; (80014b4 <display7segment+0x308>)
 8001280:	f000 ff89 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2120      	movs	r1, #32
 8001288:	488a      	ldr	r0, [pc, #552]	; (80014b4 <display7segment+0x308>)
 800128a:	f000 ff84 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2140      	movs	r1, #64	; 0x40
 8001292:	4888      	ldr	r0, [pc, #544]	; (80014b4 <display7segment+0x308>)
 8001294:	f000 ff7f 	bl	8002196 <HAL_GPIO_WritePin>
		}
	if (num == 3){
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b03      	cmp	r3, #3
 800129c:	d122      	bne.n	80012e4 <display7segment+0x138>
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2101      	movs	r1, #1
 80012a2:	4884      	ldr	r0, [pc, #528]	; (80014b4 <display7segment+0x308>)
 80012a4:	f000 ff77 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2102      	movs	r1, #2
 80012ac:	4881      	ldr	r0, [pc, #516]	; (80014b4 <display7segment+0x308>)
 80012ae:	f000 ff72 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2104      	movs	r1, #4
 80012b6:	487f      	ldr	r0, [pc, #508]	; (80014b4 <display7segment+0x308>)
 80012b8:	f000 ff6d 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	2108      	movs	r1, #8
 80012c0:	487c      	ldr	r0, [pc, #496]	; (80014b4 <display7segment+0x308>)
 80012c2:	f000 ff68 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2110      	movs	r1, #16
 80012ca:	487a      	ldr	r0, [pc, #488]	; (80014b4 <display7segment+0x308>)
 80012cc:	f000 ff63 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	2120      	movs	r1, #32
 80012d4:	4877      	ldr	r0, [pc, #476]	; (80014b4 <display7segment+0x308>)
 80012d6:	f000 ff5e 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2140      	movs	r1, #64	; 0x40
 80012de:	4875      	ldr	r0, [pc, #468]	; (80014b4 <display7segment+0x308>)
 80012e0:	f000 ff59 	bl	8002196 <HAL_GPIO_WritePin>
		}
	if (num == 4){
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d122      	bne.n	8001330 <display7segment+0x184>
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	2101      	movs	r1, #1
 80012ee:	4871      	ldr	r0, [pc, #452]	; (80014b4 <display7segment+0x308>)
 80012f0:	f000 ff51 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2102      	movs	r1, #2
 80012f8:	486e      	ldr	r0, [pc, #440]	; (80014b4 <display7segment+0x308>)
 80012fa:	f000 ff4c 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2104      	movs	r1, #4
 8001302:	486c      	ldr	r0, [pc, #432]	; (80014b4 <display7segment+0x308>)
 8001304:	f000 ff47 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8001308:	2201      	movs	r2, #1
 800130a:	2108      	movs	r1, #8
 800130c:	4869      	ldr	r0, [pc, #420]	; (80014b4 <display7segment+0x308>)
 800130e:	f000 ff42 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8001312:	2201      	movs	r2, #1
 8001314:	2110      	movs	r1, #16
 8001316:	4867      	ldr	r0, [pc, #412]	; (80014b4 <display7segment+0x308>)
 8001318:	f000 ff3d 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2120      	movs	r1, #32
 8001320:	4864      	ldr	r0, [pc, #400]	; (80014b4 <display7segment+0x308>)
 8001322:	f000 ff38 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2140      	movs	r1, #64	; 0x40
 800132a:	4862      	ldr	r0, [pc, #392]	; (80014b4 <display7segment+0x308>)
 800132c:	f000 ff33 	bl	8002196 <HAL_GPIO_WritePin>
		}
	if (num == 5){
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b05      	cmp	r3, #5
 8001334:	d122      	bne.n	800137c <display7segment+0x1d0>
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2101      	movs	r1, #1
 800133a:	485e      	ldr	r0, [pc, #376]	; (80014b4 <display7segment+0x308>)
 800133c:	f000 ff2b 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2102      	movs	r1, #2
 8001344:	485b      	ldr	r0, [pc, #364]	; (80014b4 <display7segment+0x308>)
 8001346:	f000 ff26 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2104      	movs	r1, #4
 800134e:	4859      	ldr	r0, [pc, #356]	; (80014b4 <display7segment+0x308>)
 8001350:	f000 ff21 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2108      	movs	r1, #8
 8001358:	4856      	ldr	r0, [pc, #344]	; (80014b4 <display7segment+0x308>)
 800135a:	f000 ff1c 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2110      	movs	r1, #16
 8001362:	4854      	ldr	r0, [pc, #336]	; (80014b4 <display7segment+0x308>)
 8001364:	f000 ff17 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2120      	movs	r1, #32
 800136c:	4851      	ldr	r0, [pc, #324]	; (80014b4 <display7segment+0x308>)
 800136e:	f000 ff12 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2140      	movs	r1, #64	; 0x40
 8001376:	484f      	ldr	r0, [pc, #316]	; (80014b4 <display7segment+0x308>)
 8001378:	f000 ff0d 	bl	8002196 <HAL_GPIO_WritePin>
		}
	if (num == 6){
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b06      	cmp	r3, #6
 8001380:	d122      	bne.n	80013c8 <display7segment+0x21c>
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2101      	movs	r1, #1
 8001386:	484b      	ldr	r0, [pc, #300]	; (80014b4 <display7segment+0x308>)
 8001388:	f000 ff05 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2102      	movs	r1, #2
 8001390:	4848      	ldr	r0, [pc, #288]	; (80014b4 <display7segment+0x308>)
 8001392:	f000 ff00 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2104      	movs	r1, #4
 800139a:	4846      	ldr	r0, [pc, #280]	; (80014b4 <display7segment+0x308>)
 800139c:	f000 fefb 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2108      	movs	r1, #8
 80013a4:	4843      	ldr	r0, [pc, #268]	; (80014b4 <display7segment+0x308>)
 80013a6:	f000 fef6 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2110      	movs	r1, #16
 80013ae:	4841      	ldr	r0, [pc, #260]	; (80014b4 <display7segment+0x308>)
 80013b0:	f000 fef1 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2120      	movs	r1, #32
 80013b8:	483e      	ldr	r0, [pc, #248]	; (80014b4 <display7segment+0x308>)
 80013ba:	f000 feec 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2140      	movs	r1, #64	; 0x40
 80013c2:	483c      	ldr	r0, [pc, #240]	; (80014b4 <display7segment+0x308>)
 80013c4:	f000 fee7 	bl	8002196 <HAL_GPIO_WritePin>
		}
	if (num == 7){
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b07      	cmp	r3, #7
 80013cc:	d122      	bne.n	8001414 <display7segment+0x268>
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2101      	movs	r1, #1
 80013d2:	4838      	ldr	r0, [pc, #224]	; (80014b4 <display7segment+0x308>)
 80013d4:	f000 fedf 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2102      	movs	r1, #2
 80013dc:	4835      	ldr	r0, [pc, #212]	; (80014b4 <display7segment+0x308>)
 80013de:	f000 feda 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2104      	movs	r1, #4
 80013e6:	4833      	ldr	r0, [pc, #204]	; (80014b4 <display7segment+0x308>)
 80013e8:	f000 fed5 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2108      	movs	r1, #8
 80013f0:	4830      	ldr	r0, [pc, #192]	; (80014b4 <display7segment+0x308>)
 80013f2:	f000 fed0 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2110      	movs	r1, #16
 80013fa:	482e      	ldr	r0, [pc, #184]	; (80014b4 <display7segment+0x308>)
 80013fc:	f000 fecb 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2120      	movs	r1, #32
 8001404:	482b      	ldr	r0, [pc, #172]	; (80014b4 <display7segment+0x308>)
 8001406:	f000 fec6 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	4829      	ldr	r0, [pc, #164]	; (80014b4 <display7segment+0x308>)
 8001410:	f000 fec1 	bl	8002196 <HAL_GPIO_WritePin>
		}
	if (num == 8){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b08      	cmp	r3, #8
 8001418:	d122      	bne.n	8001460 <display7segment+0x2b4>
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2101      	movs	r1, #1
 800141e:	4825      	ldr	r0, [pc, #148]	; (80014b4 <display7segment+0x308>)
 8001420:	f000 feb9 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	2102      	movs	r1, #2
 8001428:	4822      	ldr	r0, [pc, #136]	; (80014b4 <display7segment+0x308>)
 800142a:	f000 feb4 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2104      	movs	r1, #4
 8001432:	4820      	ldr	r0, [pc, #128]	; (80014b4 <display7segment+0x308>)
 8001434:	f000 feaf 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2108      	movs	r1, #8
 800143c:	481d      	ldr	r0, [pc, #116]	; (80014b4 <display7segment+0x308>)
 800143e:	f000 feaa 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2110      	movs	r1, #16
 8001446:	481b      	ldr	r0, [pc, #108]	; (80014b4 <display7segment+0x308>)
 8001448:	f000 fea5 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2120      	movs	r1, #32
 8001450:	4818      	ldr	r0, [pc, #96]	; (80014b4 <display7segment+0x308>)
 8001452:	f000 fea0 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	4816      	ldr	r0, [pc, #88]	; (80014b4 <display7segment+0x308>)
 800145c:	f000 fe9b 	bl	8002196 <HAL_GPIO_WritePin>
		}
	if (num == 9){
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b09      	cmp	r3, #9
 8001464:	d122      	bne.n	80014ac <display7segment+0x300>
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2101      	movs	r1, #1
 800146a:	4812      	ldr	r0, [pc, #72]	; (80014b4 <display7segment+0x308>)
 800146c:	f000 fe93 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2102      	movs	r1, #2
 8001474:	480f      	ldr	r0, [pc, #60]	; (80014b4 <display7segment+0x308>)
 8001476:	f000 fe8e 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2104      	movs	r1, #4
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <display7segment+0x308>)
 8001480:	f000 fe89 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	2108      	movs	r1, #8
 8001488:	480a      	ldr	r0, [pc, #40]	; (80014b4 <display7segment+0x308>)
 800148a:	f000 fe84 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800148e:	2201      	movs	r2, #1
 8001490:	2110      	movs	r1, #16
 8001492:	4808      	ldr	r0, [pc, #32]	; (80014b4 <display7segment+0x308>)
 8001494:	f000 fe7f 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	2120      	movs	r1, #32
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <display7segment+0x308>)
 800149e:	f000 fe7a 	bl	8002196 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2140      	movs	r1, #64	; 0x40
 80014a6:	4803      	ldr	r0, [pc, #12]	; (80014b4 <display7segment+0x308>)
 80014a8:	f000 fe75 	bl	8002196 <HAL_GPIO_WritePin>
		}
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40010c00 	.word	0x40010c00

080014b8 <update7SEG>:

void update7SEG(int index){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	f200 8084 	bhi.w	80015d0 <update7SEG+0x118>
 80014c8:	a201      	add	r2, pc, #4	; (adr r2, 80014d0 <update7SEG+0x18>)
 80014ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ce:	bf00      	nop
 80014d0:	080014e1 	.word	0x080014e1
 80014d4:	0800151d 	.word	0x0800151d
 80014d8:	08001559 	.word	0x08001559
 80014dc:	08001595 	.word	0x08001595
 switch (index){
 	 case 0:
 		 // Display the first 7 SEG with led_buffer [0]
 		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e6:	483d      	ldr	r0, [pc, #244]	; (80015dc <update7SEG+0x124>)
 80014e8:	f000 fe55 	bl	8002196 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f2:	483a      	ldr	r0, [pc, #232]	; (80015dc <update7SEG+0x124>)
 80014f4:	f000 fe4f 	bl	8002196 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014fe:	4837      	ldr	r0, [pc, #220]	; (80015dc <update7SEG+0x124>)
 8001500:	f000 fe49 	bl	8002196 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800150a:	4834      	ldr	r0, [pc, #208]	; (80015dc <update7SEG+0x124>)
 800150c:	f000 fe43 	bl	8002196 <HAL_GPIO_WritePin>
 		display7segment(clock_buffer[0]);
 8001510:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <update7SEG+0x128>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fe49 	bl	80011ac <display7segment>
 		break;
 800151a:	e05a      	b.n	80015d2 <update7SEG+0x11a>
 	 case 1:
 		 // Display the second 7 SEG with led_buffer [1]
 		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001522:	482e      	ldr	r0, [pc, #184]	; (80015dc <update7SEG+0x124>)
 8001524:	f000 fe37 	bl	8002196 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152e:	482b      	ldr	r0, [pc, #172]	; (80015dc <update7SEG+0x124>)
 8001530:	f000 fe31 	bl	8002196 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800153a:	4828      	ldr	r0, [pc, #160]	; (80015dc <update7SEG+0x124>)
 800153c:	f000 fe2b 	bl	8002196 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001546:	4825      	ldr	r0, [pc, #148]	; (80015dc <update7SEG+0x124>)
 8001548:	f000 fe25 	bl	8002196 <HAL_GPIO_WritePin>
 		display7segment(clock_buffer[1]);
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <update7SEG+0x128>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fe2b 	bl	80011ac <display7segment>
 		break;
 8001556:	e03c      	b.n	80015d2 <update7SEG+0x11a>
 	 case 2:
		 // Display the first 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800155e:	481f      	ldr	r0, [pc, #124]	; (80015dc <update7SEG+0x124>)
 8001560:	f000 fe19 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156a:	481c      	ldr	r0, [pc, #112]	; (80015dc <update7SEG+0x124>)
 800156c:	f000 fe13 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001576:	4819      	ldr	r0, [pc, #100]	; (80015dc <update7SEG+0x124>)
 8001578:	f000 fe0d 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001582:	4816      	ldr	r0, [pc, #88]	; (80015dc <update7SEG+0x124>)
 8001584:	f000 fe07 	bl	8002196 <HAL_GPIO_WritePin>
		display7segment(clock_buffer[2]);
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <update7SEG+0x128>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fe0d 	bl	80011ac <display7segment>
		break;
 8001592:	e01e      	b.n	80015d2 <update7SEG+0x11a>
 	 case 3:
		 // Display the first 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800159a:	4810      	ldr	r0, [pc, #64]	; (80015dc <update7SEG+0x124>)
 800159c:	f000 fdfb 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <update7SEG+0x124>)
 80015a8:	f000 fdf5 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b2:	480a      	ldr	r0, [pc, #40]	; (80015dc <update7SEG+0x124>)
 80015b4:	f000 fdef 	bl	8002196 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <update7SEG+0x124>)
 80015c0:	f000 fde9 	bl	8002196 <HAL_GPIO_WritePin>
		display7segment(clock_buffer[3]);
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <update7SEG+0x128>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fdef 	bl	80011ac <display7segment>
		break;
 80015ce:	e000      	b.n	80015d2 <update7SEG+0x11a>
 	default:
 		 break;
 80015d0:	bf00      	nop
 }
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40010800 	.word	0x40010800
 80015e0:	20000090 	.word	0x20000090

080015e4 <decrease_1sec>:
void decrease_1sec(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	count[0]--;
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <decrease_1sec+0x88>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	4a1f      	ldr	r2, [pc, #124]	; (800166c <decrease_1sec+0x88>)
 80015f0:	6013      	str	r3, [r2, #0]
	count[1]--;
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <decrease_1sec+0x88>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	4a1c      	ldr	r2, [pc, #112]	; (800166c <decrease_1sec+0x88>)
 80015fa:	6053      	str	r3, [r2, #4]
	clock_buffer[0] = count[1]/10;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <decrease_1sec+0x88>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <decrease_1sec+0x8c>)
 8001602:	fb82 1203 	smull	r1, r2, r2, r3
 8001606:	1092      	asrs	r2, r2, #2
 8001608:	17db      	asrs	r3, r3, #31
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	4a19      	ldr	r2, [pc, #100]	; (8001674 <decrease_1sec+0x90>)
 800160e:	6013      	str	r3, [r2, #0]
	clock_buffer[1] = count[1]%10;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <decrease_1sec+0x88>)
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <decrease_1sec+0x8c>)
 8001616:	fb83 2301 	smull	r2, r3, r3, r1
 800161a:	109a      	asrs	r2, r3, #2
 800161c:	17cb      	asrs	r3, r1, #31
 800161e:	1ad2      	subs	r2, r2, r3
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	1aca      	subs	r2, r1, r3
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <decrease_1sec+0x90>)
 800162c:	605a      	str	r2, [r3, #4]
	clock_buffer[2] = count[0]/10;
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <decrease_1sec+0x88>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <decrease_1sec+0x8c>)
 8001634:	fb82 1203 	smull	r1, r2, r2, r3
 8001638:	1092      	asrs	r2, r2, #2
 800163a:	17db      	asrs	r3, r3, #31
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <decrease_1sec+0x90>)
 8001640:	6093      	str	r3, [r2, #8]
	clock_buffer[3] = count[0]%10;
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <decrease_1sec+0x88>)
 8001644:	6819      	ldr	r1, [r3, #0]
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <decrease_1sec+0x8c>)
 8001648:	fb83 2301 	smull	r2, r3, r3, r1
 800164c:	109a      	asrs	r2, r3, #2
 800164e:	17cb      	asrs	r3, r1, #31
 8001650:	1ad2      	subs	r2, r2, r3
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	1aca      	subs	r2, r1, r3
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <decrease_1sec+0x90>)
 800165e:	60da      	str	r2, [r3, #12]
	setTimer4(1000);
 8001660:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001664:	f000 f972 	bl	800194c <setTimer4>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000040 	.word	0x20000040
 8001670:	66666667 	.word	0x66666667
 8001674:	20000090 	.word	0x20000090

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167c:	f000 fa8a 	bl	8001b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001680:	f000 f818 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001684:	f000 f89e 	bl	80017c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001688:	f000 f850 	bl	800172c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800168c:	4807      	ldr	r0, [pc, #28]	; (80016ac <main+0x34>)
 800168e:	f001 f9eb 	bl	8002a68 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(500);
 8001692:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001696:	f000 f90b 	bl	80018b0 <setTimer1>
  status = INIT;
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <main+0x38>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	fsm_auto_run();
 80016a0:	f7fe fea4 	bl	80003ec <fsm_auto_run>
	fsm_manual_run();
 80016a4:	f7ff f8e2 	bl	800086c <fsm_manual_run>
	fsm_auto_run();
 80016a8:	e7fa      	b.n	80016a0 <main+0x28>
 80016aa:	bf00      	nop
 80016ac:	200000c0 	.word	0x200000c0
 80016b0:	20000084 	.word	0x20000084

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b090      	sub	sp, #64	; 0x40
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0318 	add.w	r3, r7, #24
 80016be:	2228      	movs	r2, #40	; 0x28
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f001 fd88 	bl	80031d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016da:	2301      	movs	r3, #1
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016de:	2310      	movs	r3, #16
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e6:	f107 0318 	add.w	r3, r7, #24
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fd84 	bl	80021f8 <HAL_RCC_OscConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80016f6:	f000 f8d5 	bl	80018a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fa:	230f      	movs	r3, #15
 80016fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fff0 	bl	80026f8 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800171e:	f000 f8c1 	bl	80018a4 <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3740      	adds	r7, #64	; 0x40
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001740:	463b      	mov	r3, r7
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MX_TIM2_Init+0x94>)
 800174a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_TIM2_Init+0x94>)
 8001752:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001756:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_TIM2_Init+0x94>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_TIM2_Init+0x94>)
 8001760:	2209      	movs	r2, #9
 8001762:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_TIM2_Init+0x94>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_TIM2_Init+0x94>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <MX_TIM2_Init+0x94>)
 8001772:	f001 f929 	bl	80029c8 <HAL_TIM_Base_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800177c:	f000 f892 	bl	80018a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	4619      	mov	r1, r3
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <MX_TIM2_Init+0x94>)
 800178e:	f001 fabf 	bl	8002d10 <HAL_TIM_ConfigClockSource>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001798:	f000 f884 	bl	80018a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017a4:	463b      	mov	r3, r7
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_TIM2_Init+0x94>)
 80017aa:	f001 fc87 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017b4:	f000 f876 	bl	80018a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200000c0 	.word	0x200000c0

080017c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <MX_GPIO_Init+0xb4>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a26      	ldr	r2, [pc, #152]	; (8001878 <MX_GPIO_Init+0xb4>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <MX_GPIO_Init+0xb4>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MX_GPIO_Init+0xb4>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a20      	ldr	r2, [pc, #128]	; (8001878 <MX_GPIO_Init+0xb4>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_GPIO_Init+0xb4>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8001808:	2200      	movs	r2, #0
 800180a:	f24f 71e0 	movw	r1, #63456	; 0xf7e0
 800180e:	481b      	ldr	r0, [pc, #108]	; (800187c <MX_GPIO_Init+0xb8>)
 8001810:	f000 fcc1 	bl	8002196 <HAL_GPIO_WritePin>
                          |YELLOW_2_Pin|GREEN_2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
 8001814:	2200      	movs	r2, #0
 8001816:	217f      	movs	r1, #127	; 0x7f
 8001818:	4819      	ldr	r0, [pc, #100]	; (8001880 <MX_GPIO_Init+0xbc>)
 800181a:	f000 fcbc 	bl	8002196 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800181e:	230e      	movs	r3, #14
 8001820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001826:	2301      	movs	r3, #1
 8001828:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	4619      	mov	r1, r3
 8001830:	4812      	ldr	r0, [pc, #72]	; (800187c <MX_GPIO_Init+0xb8>)
 8001832:	f000 fb1f 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
                           YELLOW_2_Pin GREEN_2_Pin EN1_Pin EN2_Pin
                           EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8001836:	f24f 73e0 	movw	r3, #63456	; 0xf7e0
 800183a:	60bb      	str	r3, [r7, #8]
                          |YELLOW_2_Pin|GREEN_2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2302      	movs	r3, #2
 8001846:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	4619      	mov	r1, r3
 800184e:	480b      	ldr	r0, [pc, #44]	; (800187c <MX_GPIO_Init+0xb8>)
 8001850:	f000 fb10 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 8001854:	237f      	movs	r3, #127	; 0x7f
 8001856:	60bb      	str	r3, [r7, #8]
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2302      	movs	r3, #2
 8001862:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f107 0308 	add.w	r3, r7, #8
 8001868:	4619      	mov	r1, r3
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_GPIO_Init+0xbc>)
 800186c:	f000 fb02 	bl	8001e74 <HAL_GPIO_Init>

}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000
 800187c:	40010800 	.word	0x40010800
 8001880:	40010c00 	.word	0x40010c00

08001884 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	timerRun();
 800188c:	f000 f878 	bl	8001980 <timerRun>
	getKeyInput1();
 8001890:	f7fe fcb6 	bl	8000200 <getKeyInput1>
	getKeyInput2();
 8001894:	f7fe fd06 	bl	80002a4 <getKeyInput2>
	getKeyInput3();
 8001898:	f7fe fd56 	bl	8000348 <getKeyInput3>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
}
 80018aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ac:	e7fe      	b.n	80018ac <Error_Handler+0x8>
	...

080018b0 <setTimer1>:
int timer4_counter = 0;
int timer4_flag = 0;

int TIMER_CYCLE = 10;

void setTimer1(int duration){ //Blinky
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <setTimer1+0x28>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c2:	4a06      	ldr	r2, [pc, #24]	; (80018dc <setTimer1+0x2c>)
 80018c4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <setTimer1+0x30>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2000004c 	.word	0x2000004c
 80018dc:	200000a0 	.word	0x200000a0
 80018e0:	200000a4 	.word	0x200000a4

080018e4 <setTimer2>:
void setTimer2(int duration){ //Auto traffic
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <setTimer2+0x28>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80018f6:	4a06      	ldr	r2, [pc, #24]	; (8001910 <setTimer2+0x2c>)
 80018f8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <setTimer2+0x30>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	2000004c 	.word	0x2000004c
 8001910:	200000a8 	.word	0x200000a8
 8001914:	200000ac 	.word	0x200000ac

08001918 <setTimer3>:
void setTimer3(int duration){ //7SEG
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <setTimer3+0x28>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	fb92 f3f3 	sdiv	r3, r2, r3
 800192a:	4a06      	ldr	r2, [pc, #24]	; (8001944 <setTimer3+0x2c>)
 800192c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <setTimer3+0x30>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	2000004c 	.word	0x2000004c
 8001944:	200000b0 	.word	0x200000b0
 8001948:	200000b4 	.word	0x200000b4

0800194c <setTimer4>:
void setTimer4(int duration){ //7SEG
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <setTimer4+0x28>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	fb92 f3f3 	sdiv	r3, r2, r3
 800195e:	4a06      	ldr	r2, [pc, #24]	; (8001978 <setTimer4+0x2c>)
 8001960:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <setTimer4+0x30>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2000004c 	.word	0x2000004c
 8001978:	200000b8 	.word	0x200000b8
 800197c:	200000bc 	.word	0x200000bc

08001980 <timerRun>:

void timerRun(){
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <timerRun+0x8c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	dd0b      	ble.n	80019a4 <timerRun+0x24>
		timer1_counter--;
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <timerRun+0x8c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3b01      	subs	r3, #1
 8001992:	4a1e      	ldr	r2, [pc, #120]	; (8001a0c <timerRun+0x8c>)
 8001994:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <timerRun+0x8c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	dc02      	bgt.n	80019a4 <timerRun+0x24>
			timer1_flag = 1;
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <timerRun+0x90>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <timerRun+0x94>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	dd0b      	ble.n	80019c4 <timerRun+0x44>
		timer2_counter--;
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <timerRun+0x94>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <timerRun+0x94>)
 80019b4:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <timerRun+0x94>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	dc02      	bgt.n	80019c4 <timerRun+0x44>
			timer2_flag = 1;
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <timerRun+0x98>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0){
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <timerRun+0x9c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	dd0b      	ble.n	80019e4 <timerRun+0x64>
			timer3_counter--;
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <timerRun+0x9c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <timerRun+0x9c>)
 80019d4:	6013      	str	r3, [r2, #0]
			if (timer3_counter <= 0){
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <timerRun+0x9c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	dc02      	bgt.n	80019e4 <timerRun+0x64>
				timer3_flag = 1;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <timerRun+0xa0>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
			}
	}
	if (timer4_counter > 0){
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <timerRun+0xa4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	dd0b      	ble.n	8001a04 <timerRun+0x84>
		timer4_counter--;
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <timerRun+0xa4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <timerRun+0xa4>)
 80019f4:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0){
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <timerRun+0xa4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	dc02      	bgt.n	8001a04 <timerRun+0x84>
			timer4_flag = 1;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <timerRun+0xa8>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	200000a0 	.word	0x200000a0
 8001a10:	200000a4 	.word	0x200000a4
 8001a14:	200000a8 	.word	0x200000a8
 8001a18:	200000ac 	.word	0x200000ac
 8001a1c:	200000b0 	.word	0x200000b0
 8001a20:	200000b4 	.word	0x200000b4
 8001a24:	200000b8 	.word	0x200000b8
 8001a28:	200000bc 	.word	0x200000bc

08001a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_MspInit+0x5c>)
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_MspInit+0x5c>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6193      	str	r3, [r2, #24]
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_MspInit+0x5c>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_MspInit+0x5c>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <HAL_MspInit+0x5c>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	61d3      	str	r3, [r2, #28]
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <HAL_MspInit+0x5c>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_MspInit+0x60>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_MspInit+0x60>)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010000 	.word	0x40010000

08001a90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa0:	d113      	bne.n	8001aca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_TIM_Base_MspInit+0x44>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_TIM_Base_MspInit+0x44>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_TIM_Base_MspInit+0x44>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	201c      	movs	r0, #28
 8001ac0:	f000 f9a1 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ac4:	201c      	movs	r0, #28
 8001ac6:	f000 f9ba 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <NMI_Handler+0x4>

08001ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1e:	f000 f87f 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <TIM2_IRQHandler+0x10>)
 8001b2e:	f000 ffe7 	bl	8002b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200000c0 	.word	0x200000c0

08001b3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b4a:	490d      	ldr	r1, [pc, #52]	; (8001b80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b60:	4c0a      	ldr	r4, [pc, #40]	; (8001b8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b6e:	f7ff ffe5 	bl	8001b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b72:	f001 fb0d 	bl	8003190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b76:	f7ff fd7f 	bl	8001678 <main>
  bx lr
 8001b7a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b84:	08003228 	.word	0x08003228
  ldr r2, =_sbss
 8001b88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b8c:	2000010c 	.word	0x2000010c

08001b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC1_2_IRQHandler>
	...

08001b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_Init+0x28>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <HAL_Init+0x28>)
 8001b9e:	f043 0310 	orr.w	r3, r3, #16
 8001ba2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f000 f923 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001baa:	200f      	movs	r0, #15
 8001bac:	f000 f808 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb0:	f7ff ff3c 	bl	8001a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40022000 	.word	0x40022000

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f93b 	bl	8001e5a <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f000 f903 	bl	8001e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <HAL_InitTick+0x5c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000050 	.word	0x20000050
 8001c18:	20000058 	.word	0x20000058
 8001c1c:	20000054 	.word	0x20000054

08001c20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_IncTick+0x1c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_IncTick+0x20>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a03      	ldr	r2, [pc, #12]	; (8001c40 <HAL_IncTick+0x20>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	20000058 	.word	0x20000058
 8001c40:	20000108 	.word	0x20000108

08001c44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b02      	ldr	r3, [pc, #8]	; (8001c54 <HAL_GetTick+0x10>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	20000108 	.word	0x20000108

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <__NVIC_EnableIRQ+0x34>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
         );
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f7ff ff90 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff2d 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff42 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff90 	bl	8001d48 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5f 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff35 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa2 	bl	8001dac <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b08b      	sub	sp, #44	; 0x2c
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e86:	e148      	b.n	800211a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 8137 	bne.w	8002114 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4aa3      	ldr	r2, [pc, #652]	; (8002138 <HAL_GPIO_Init+0x2c4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d05e      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001eb0:	4aa1      	ldr	r2, [pc, #644]	; (8002138 <HAL_GPIO_Init+0x2c4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d875      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001eb6:	4aa1      	ldr	r2, [pc, #644]	; (800213c <HAL_GPIO_Init+0x2c8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d058      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ebc:	4a9f      	ldr	r2, [pc, #636]	; (800213c <HAL_GPIO_Init+0x2c8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d86f      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001ec2:	4a9f      	ldr	r2, [pc, #636]	; (8002140 <HAL_GPIO_Init+0x2cc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d052      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ec8:	4a9d      	ldr	r2, [pc, #628]	; (8002140 <HAL_GPIO_Init+0x2cc>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d869      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001ece:	4a9d      	ldr	r2, [pc, #628]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d04c      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ed4:	4a9b      	ldr	r2, [pc, #620]	; (8002144 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d863      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001eda:	4a9b      	ldr	r2, [pc, #620]	; (8002148 <HAL_GPIO_Init+0x2d4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d046      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ee0:	4a99      	ldr	r2, [pc, #612]	; (8002148 <HAL_GPIO_Init+0x2d4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d85d      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001ee6:	2b12      	cmp	r3, #18
 8001ee8:	d82a      	bhi.n	8001f40 <HAL_GPIO_Init+0xcc>
 8001eea:	2b12      	cmp	r3, #18
 8001eec:	d859      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001eee:	a201      	add	r2, pc, #4	; (adr r2, 8001ef4 <HAL_GPIO_Init+0x80>)
 8001ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef4:	08001f6f 	.word	0x08001f6f
 8001ef8:	08001f49 	.word	0x08001f49
 8001efc:	08001f5b 	.word	0x08001f5b
 8001f00:	08001f9d 	.word	0x08001f9d
 8001f04:	08001fa3 	.word	0x08001fa3
 8001f08:	08001fa3 	.word	0x08001fa3
 8001f0c:	08001fa3 	.word	0x08001fa3
 8001f10:	08001fa3 	.word	0x08001fa3
 8001f14:	08001fa3 	.word	0x08001fa3
 8001f18:	08001fa3 	.word	0x08001fa3
 8001f1c:	08001fa3 	.word	0x08001fa3
 8001f20:	08001fa3 	.word	0x08001fa3
 8001f24:	08001fa3 	.word	0x08001fa3
 8001f28:	08001fa3 	.word	0x08001fa3
 8001f2c:	08001fa3 	.word	0x08001fa3
 8001f30:	08001fa3 	.word	0x08001fa3
 8001f34:	08001fa3 	.word	0x08001fa3
 8001f38:	08001f51 	.word	0x08001f51
 8001f3c:	08001f65 	.word	0x08001f65
 8001f40:	4a82      	ldr	r2, [pc, #520]	; (800214c <HAL_GPIO_Init+0x2d8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f46:	e02c      	b.n	8001fa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e029      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	3304      	adds	r3, #4
 8001f56:	623b      	str	r3, [r7, #32]
          break;
 8001f58:	e024      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	3308      	adds	r3, #8
 8001f60:	623b      	str	r3, [r7, #32]
          break;
 8001f62:	e01f      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	330c      	adds	r3, #12
 8001f6a:	623b      	str	r3, [r7, #32]
          break;
 8001f6c:	e01a      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f76:	2304      	movs	r3, #4
 8001f78:	623b      	str	r3, [r7, #32]
          break;
 8001f7a:	e013      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f84:	2308      	movs	r3, #8
 8001f86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	611a      	str	r2, [r3, #16]
          break;
 8001f8e:	e009      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f90:	2308      	movs	r3, #8
 8001f92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	615a      	str	r2, [r3, #20]
          break;
 8001f9a:	e003      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
          break;
 8001fa0:	e000      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          break;
 8001fa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2bff      	cmp	r3, #255	; 0xff
 8001fa8:	d801      	bhi.n	8001fae <HAL_GPIO_Init+0x13a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	e001      	b.n	8001fb2 <HAL_GPIO_Init+0x13e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2bff      	cmp	r3, #255	; 0xff
 8001fb8:	d802      	bhi.n	8001fc0 <HAL_GPIO_Init+0x14c>
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	e002      	b.n	8001fc6 <HAL_GPIO_Init+0x152>
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	3b08      	subs	r3, #8
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	210f      	movs	r1, #15
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	6a39      	ldr	r1, [r7, #32]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8090 	beq.w	8002114 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ff4:	4b56      	ldr	r3, [pc, #344]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a55      	ldr	r2, [pc, #340]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b53      	ldr	r3, [pc, #332]	; (8002150 <HAL_GPIO_Init+0x2dc>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800200c:	4a51      	ldr	r2, [pc, #324]	; (8002154 <HAL_GPIO_Init+0x2e0>)
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002018:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a49      	ldr	r2, [pc, #292]	; (8002158 <HAL_GPIO_Init+0x2e4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00d      	beq.n	8002054 <HAL_GPIO_Init+0x1e0>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a48      	ldr	r2, [pc, #288]	; (800215c <HAL_GPIO_Init+0x2e8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <HAL_GPIO_Init+0x1dc>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a47      	ldr	r2, [pc, #284]	; (8002160 <HAL_GPIO_Init+0x2ec>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d101      	bne.n	800204c <HAL_GPIO_Init+0x1d8>
 8002048:	2302      	movs	r3, #2
 800204a:	e004      	b.n	8002056 <HAL_GPIO_Init+0x1e2>
 800204c:	2303      	movs	r3, #3
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x1e2>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_GPIO_Init+0x1e2>
 8002054:	2300      	movs	r3, #0
 8002056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002058:	f002 0203 	and.w	r2, r2, #3
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	4093      	lsls	r3, r2
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002066:	493b      	ldr	r1, [pc, #236]	; (8002154 <HAL_GPIO_Init+0x2e0>)
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002080:	4b38      	ldr	r3, [pc, #224]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4937      	ldr	r1, [pc, #220]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800208e:	4b35      	ldr	r3, [pc, #212]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	43db      	mvns	r3, r3
 8002096:	4933      	ldr	r1, [pc, #204]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 8002098:	4013      	ands	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d006      	beq.n	80020b6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a8:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	492d      	ldr	r1, [pc, #180]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020b6:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	43db      	mvns	r3, r3
 80020be:	4929      	ldr	r1, [pc, #164]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	4923      	ldr	r1, [pc, #140]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	491f      	ldr	r1, [pc, #124]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	4919      	ldr	r1, [pc, #100]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	43db      	mvns	r3, r3
 800210e:	4915      	ldr	r1, [pc, #84]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 8002110:	4013      	ands	r3, r2
 8002112:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	3301      	adds	r3, #1
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	f47f aeaf 	bne.w	8001e88 <HAL_GPIO_Init+0x14>
  }
}
 800212a:	bf00      	nop
 800212c:	bf00      	nop
 800212e:	372c      	adds	r7, #44	; 0x2c
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	10320000 	.word	0x10320000
 800213c:	10310000 	.word	0x10310000
 8002140:	10220000 	.word	0x10220000
 8002144:	10210000 	.word	0x10210000
 8002148:	10120000 	.word	0x10120000
 800214c:	10110000 	.word	0x10110000
 8002150:	40021000 	.word	0x40021000
 8002154:	40010000 	.word	0x40010000
 8002158:	40010800 	.word	0x40010800
 800215c:	40010c00 	.word	0x40010c00
 8002160:	40011000 	.word	0x40011000
 8002164:	40010400 	.word	0x40010400

08002168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	e001      	b.n	800218a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	807b      	strh	r3, [r7, #2]
 80021a2:	4613      	mov	r3, r2
 80021a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a6:	787b      	ldrb	r3, [r7, #1]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ac:	887a      	ldrh	r2, [r7, #2]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021b2:	e003      	b.n	80021bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	041a      	lsls	r2, r3, #16
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	611a      	str	r2, [r3, #16]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021d8:	887a      	ldrh	r2, [r7, #2]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	041a      	lsls	r2, r3, #16
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	400b      	ands	r3, r1
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	611a      	str	r2, [r3, #16]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e26c      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8087 	beq.w	8002326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002218:	4b92      	ldr	r3, [pc, #584]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b04      	cmp	r3, #4
 8002222:	d00c      	beq.n	800223e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002224:	4b8f      	ldr	r3, [pc, #572]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d112      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
 8002230:	4b8c      	ldr	r3, [pc, #560]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d10b      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d06c      	beq.n	8002324 <HAL_RCC_OscConfig+0x12c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d168      	bne.n	8002324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e246      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x76>
 8002260:	4b80      	ldr	r3, [pc, #512]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a7f      	ldr	r2, [pc, #508]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e02e      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x98>
 8002276:	4b7b      	ldr	r3, [pc, #492]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7a      	ldr	r2, [pc, #488]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b78      	ldr	r3, [pc, #480]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a77      	ldr	r2, [pc, #476]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0xbc>
 800229a:	4b72      	ldr	r3, [pc, #456]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a71      	ldr	r2, [pc, #452]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b6f      	ldr	r3, [pc, #444]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6e      	ldr	r2, [pc, #440]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 80022b4:	4b6b      	ldr	r3, [pc, #428]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a6a      	ldr	r2, [pc, #424]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a67      	ldr	r2, [pc, #412]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fcb6 	bl	8001c44 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff fcb2 	bl	8001c44 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1fa      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b5d      	ldr	r3, [pc, #372]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xe4>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff fca2 	bl	8001c44 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fc9e 	bl	8001c44 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1e6      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x10c>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d063      	beq.n	80023fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002332:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800233e:	4b49      	ldr	r3, [pc, #292]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b08      	cmp	r3, #8
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
 800234a:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b43      	ldr	r3, [pc, #268]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1ba      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4939      	ldr	r1, [pc, #228]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7ff fc57 	bl	8001c44 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7ff fc53 	bl	8001c44 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e19b      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4927      	ldr	r1, [pc, #156]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7ff fc36 	bl	8001c44 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023dc:	f7ff fc32 	bl	8001c44 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e17a      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d03a      	beq.n	800247c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d019      	beq.n	8002442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_RCC_OscConfig+0x274>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7ff fc16 	bl	8001c44 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241c:	f7ff fc12 	bl	8001c44 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e15a      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800243a:	2001      	movs	r0, #1
 800243c:	f000 faa6 	bl	800298c <RCC_Delay>
 8002440:	e01c      	b.n	800247c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_RCC_OscConfig+0x274>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7ff fbfc 	bl	8001c44 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244e:	e00f      	b.n	8002470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7ff fbf8 	bl	8001c44 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d908      	bls.n	8002470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e140      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	42420000 	.word	0x42420000
 800246c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	4b9e      	ldr	r3, [pc, #632]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e9      	bne.n	8002450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a6 	beq.w	80025d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248e:	4b97      	ldr	r3, [pc, #604]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10d      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4b94      	ldr	r3, [pc, #592]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a93      	ldr	r2, [pc, #588]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]
 80024a6:	4b91      	ldr	r3, [pc, #580]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b8e      	ldr	r3, [pc, #568]	; (80026f0 <HAL_RCC_OscConfig+0x4f8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b8b      	ldr	r3, [pc, #556]	; (80026f0 <HAL_RCC_OscConfig+0x4f8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a8a      	ldr	r2, [pc, #552]	; (80026f0 <HAL_RCC_OscConfig+0x4f8>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7ff fbb9 	bl	8001c44 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7ff fbb5 	bl	8001c44 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	; 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0fd      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b81      	ldr	r3, [pc, #516]	; (80026f0 <HAL_RCC_OscConfig+0x4f8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x312>
 80024fc:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a7a      	ldr	r2, [pc, #488]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	e02d      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x334>
 8002512:	4b76      	ldr	r3, [pc, #472]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a75      	ldr	r2, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b73      	ldr	r3, [pc, #460]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a72      	ldr	r2, [pc, #456]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	e01c      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b05      	cmp	r3, #5
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x356>
 8002534:	4b6d      	ldr	r3, [pc, #436]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a6c      	ldr	r2, [pc, #432]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a69      	ldr	r2, [pc, #420]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	e00b      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a66      	ldr	r2, [pc, #408]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b64      	ldr	r3, [pc, #400]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a63      	ldr	r2, [pc, #396]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d015      	beq.n	800259a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7ff fb69 	bl	8001c44 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7ff fb65 	bl	8001c44 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0ab      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	4b57      	ldr	r3, [pc, #348]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ee      	beq.n	8002576 <HAL_RCC_OscConfig+0x37e>
 8002598:	e014      	b.n	80025c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7ff fb53 	bl	8001c44 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7ff fb4f 	bl	8001c44 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e095      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	4b4c      	ldr	r3, [pc, #304]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ee      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4b48      	ldr	r3, [pc, #288]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a47      	ldr	r2, [pc, #284]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8081 	beq.w	80026e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	4b42      	ldr	r3, [pc, #264]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d061      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d146      	bne.n	8002682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f4:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <HAL_RCC_OscConfig+0x4fc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7ff fb23 	bl	8001c44 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002602:	f7ff fb1f 	bl	8001c44 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e067      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	4b35      	ldr	r3, [pc, #212]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d108      	bne.n	800263c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800262a:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	492d      	ldr	r1, [pc, #180]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a19      	ldr	r1, [r3, #32]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	430b      	orrs	r3, r1
 800264e:	4927      	ldr	r1, [pc, #156]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <HAL_RCC_OscConfig+0x4fc>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7ff faf3 	bl	8001c44 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7ff faef 	bl	8001c44 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e037      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002674:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x46a>
 8002680:	e02f      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <HAL_RCC_OscConfig+0x4fc>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7ff fadc 	bl	8001c44 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7ff fad8 	bl	8001c44 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e020      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x498>
 80026ae:	e018      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e013      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40007000 	.word	0x40007000
 80026f4:	42420060 	.word	0x42420060

080026f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0d0      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800270c:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d910      	bls.n	800273c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b67      	ldr	r3, [pc, #412]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 0207 	bic.w	r2, r3, #7
 8002722:	4965      	ldr	r1, [pc, #404]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b63      	ldr	r3, [pc, #396]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0b8      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d020      	beq.n	800278a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002754:	4b59      	ldr	r3, [pc, #356]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a58      	ldr	r2, [pc, #352]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800275e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800276c:	4b53      	ldr	r3, [pc, #332]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a52      	ldr	r2, [pc, #328]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002776:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002778:	4b50      	ldr	r3, [pc, #320]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	494d      	ldr	r1, [pc, #308]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d040      	beq.n	8002818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d115      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e07f      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e073      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c6:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e06b      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d6:	4b39      	ldr	r3, [pc, #228]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4936      	ldr	r1, [pc, #216]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e8:	f7ff fa2c 	bl	8001c44 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7ff fa28 	bl	8001c44 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e053      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 020c 	and.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d1eb      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d210      	bcs.n	8002848 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 0207 	bic.w	r2, r3, #7
 800282e:	4922      	ldr	r1, [pc, #136]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e032      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4916      	ldr	r1, [pc, #88]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	490e      	ldr	r1, [pc, #56]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002886:	f000 f821 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 800288a:	4602      	mov	r2, r0
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	490a      	ldr	r1, [pc, #40]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002898:	5ccb      	ldrb	r3, [r1, r3]
 800289a:	fa22 f303 	lsr.w	r3, r2, r3
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <HAL_RCC_ClockConfig+0x1cc>)
 80028a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1d0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff f98a 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40022000 	.word	0x40022000
 80028bc:	40021000 	.word	0x40021000
 80028c0:	08003210 	.word	0x08003210
 80028c4:	20000050 	.word	0x20000050
 80028c8:	20000054 	.word	0x20000054

080028cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	b490      	push	{r4, r7}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028d2:	4b2a      	ldr	r3, [pc, #168]	; (800297c <HAL_RCC_GetSysClockFreq+0xb0>)
 80028d4:	1d3c      	adds	r4, r7, #4
 80028d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028dc:	f240 2301 	movw	r3, #513	; 0x201
 80028e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028f6:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b04      	cmp	r3, #4
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x40>
 8002906:	2b08      	cmp	r3, #8
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x46>
 800290a:	e02d      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800290e:	623b      	str	r3, [r7, #32]
      break;
 8002910:	e02d      	b.n	800296e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	0c9b      	lsrs	r3, r3, #18
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800291e:	4413      	add	r3, r2
 8002920:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002924:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	0c5b      	lsrs	r3, r3, #17
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800293e:	4413      	add	r3, r2
 8002940:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002944:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800294a:	fb02 f203 	mul.w	r2, r2, r3
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	e004      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	623b      	str	r3, [r7, #32]
      break;
 8002966:	e002      	b.n	800296e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800296a:	623b      	str	r3, [r7, #32]
      break;
 800296c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296e:	6a3b      	ldr	r3, [r7, #32]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bc90      	pop	{r4, r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	08003200 	.word	0x08003200
 8002980:	40021000 	.word	0x40021000
 8002984:	007a1200 	.word	0x007a1200
 8002988:	003d0900 	.word	0x003d0900

0800298c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <RCC_Delay+0x34>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <RCC_Delay+0x38>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	0a5b      	lsrs	r3, r3, #9
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029a8:	bf00      	nop
  }
  while (Delay --);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1e5a      	subs	r2, r3, #1
 80029ae:	60fa      	str	r2, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f9      	bne.n	80029a8 <RCC_Delay+0x1c>
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	20000050 	.word	0x20000050
 80029c4:	10624dd3 	.word	0x10624dd3

080029c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e041      	b.n	8002a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff f84e 	bl	8001a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f000 fa6a 	bl	8002ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d001      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e035      	b.n	8002aec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a16      	ldr	r2, [pc, #88]	; (8002af8 <HAL_TIM_Base_Start_IT+0x90>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d009      	beq.n	8002ab6 <HAL_TIM_Base_Start_IT+0x4e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aaa:	d004      	beq.n	8002ab6 <HAL_TIM_Base_Start_IT+0x4e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a12      	ldr	r2, [pc, #72]	; (8002afc <HAL_TIM_Base_Start_IT+0x94>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d111      	bne.n	8002ada <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b06      	cmp	r3, #6
 8002ac6:	d010      	beq.n	8002aea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad8:	e007      	b.n	8002aea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40000400 	.word	0x40000400

08002b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0202 	mvn.w	r2, #2
 8002b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f9b1 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f9a4 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f9b3 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0204 	mvn.w	r2, #4
 8002b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2202      	movs	r2, #2
 8002b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f987 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f97a 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f989 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0208 	mvn.w	r2, #8
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2204      	movs	r2, #4
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f95d 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f950 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f95f 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d122      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d11b      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0210 	mvn.w	r2, #16
 8002c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f933 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f926 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f935 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d10e      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d107      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0201 	mvn.w	r2, #1
 8002c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fe fe00 	bl	8001884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	2b80      	cmp	r3, #128	; 0x80
 8002c90:	d10e      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	2b80      	cmp	r3, #128	; 0x80
 8002c9e:	d107      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa67 	bl	800317e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b40      	cmp	r3, #64	; 0x40
 8002cbc:	d10e      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc8:	2b40      	cmp	r3, #64	; 0x40
 8002cca:	d107      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f8f9 	bl	8002ece <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d10e      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d107      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0220 	mvn.w	r2, #32
 8002d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fa32 	bl	800316c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_TIM_ConfigClockSource+0x18>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e0b3      	b.n	8002e90 <HAL_TIM_ConfigClockSource+0x180>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d60:	d03e      	beq.n	8002de0 <HAL_TIM_ConfigClockSource+0xd0>
 8002d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d66:	f200 8087 	bhi.w	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6e:	f000 8085 	beq.w	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d76:	d87f      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002d78:	2b70      	cmp	r3, #112	; 0x70
 8002d7a:	d01a      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0xa2>
 8002d7c:	2b70      	cmp	r3, #112	; 0x70
 8002d7e:	d87b      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002d80:	2b60      	cmp	r3, #96	; 0x60
 8002d82:	d050      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x116>
 8002d84:	2b60      	cmp	r3, #96	; 0x60
 8002d86:	d877      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002d88:	2b50      	cmp	r3, #80	; 0x50
 8002d8a:	d03c      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0xf6>
 8002d8c:	2b50      	cmp	r3, #80	; 0x50
 8002d8e:	d873      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d058      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x136>
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d86f      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002d98:	2b30      	cmp	r3, #48	; 0x30
 8002d9a:	d064      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x156>
 8002d9c:	2b30      	cmp	r3, #48	; 0x30
 8002d9e:	d86b      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d060      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x156>
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d867      	bhi.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d05c      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x156>
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d05a      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002db0:	e062      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6899      	ldr	r1, [r3, #8]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f000 f95c 	bl	800307e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	609a      	str	r2, [r3, #8]
      break;
 8002dde:	e04e      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6899      	ldr	r1, [r3, #8]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f000 f945 	bl	800307e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e02:	609a      	str	r2, [r3, #8]
      break;
 8002e04:	e03b      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f000 f8bc 	bl	8002f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2150      	movs	r1, #80	; 0x50
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f913 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e24:	e02b      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f000 f8da 	bl	8002fec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2160      	movs	r1, #96	; 0x60
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f903 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e44:	e01b      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	461a      	mov	r2, r3
 8002e54:	f000 f89c 	bl	8002f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2140      	movs	r1, #64	; 0x40
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f8f3 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e64:	e00b      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f000 f8ea 	bl	800304a <TIM_ITRx_SetConfig>
        break;
 8002e76:	e002      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e78:	bf00      	nop
 8002e7a:	e000      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a25      	ldr	r2, [pc, #148]	; (8002f88 <TIM_Base_SetConfig+0xa8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d007      	beq.n	8002f08 <TIM_Base_SetConfig+0x28>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efe:	d003      	beq.n	8002f08 <TIM_Base_SetConfig+0x28>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a22      	ldr	r2, [pc, #136]	; (8002f8c <TIM_Base_SetConfig+0xac>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d108      	bne.n	8002f1a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1a      	ldr	r2, [pc, #104]	; (8002f88 <TIM_Base_SetConfig+0xa8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d007      	beq.n	8002f32 <TIM_Base_SetConfig+0x52>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f28:	d003      	beq.n	8002f32 <TIM_Base_SetConfig+0x52>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <TIM_Base_SetConfig+0xac>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d108      	bne.n	8002f44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <TIM_Base_SetConfig+0xa8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d103      	bne.n	8002f78 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	615a      	str	r2, [r3, #20]
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	40000400 	.word	0x40000400

08002f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f023 0201 	bic.w	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f023 030a 	bic.w	r3, r3, #10
 8002fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	621a      	str	r2, [r3, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f023 0210 	bic.w	r2, r3, #16
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003016:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	031b      	lsls	r3, r3, #12
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003028:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	621a      	str	r2, [r3, #32]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	f043 0307 	orr.w	r3, r3, #7
 800306c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	609a      	str	r2, [r3, #8]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800307e:	b480      	push	{r7}
 8003080:	b087      	sub	sp, #28
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003098:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	609a      	str	r2, [r3, #8]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e041      	b.n	8003158 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a14      	ldr	r2, [pc, #80]	; (8003164 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003120:	d004      	beq.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d10c      	bne.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003132:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	4313      	orrs	r3, r2
 800313c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40000400 	.word	0x40000400

0800316c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <__libc_init_array>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	2600      	movs	r6, #0
 8003194:	4d0c      	ldr	r5, [pc, #48]	; (80031c8 <__libc_init_array+0x38>)
 8003196:	4c0d      	ldr	r4, [pc, #52]	; (80031cc <__libc_init_array+0x3c>)
 8003198:	1b64      	subs	r4, r4, r5
 800319a:	10a4      	asrs	r4, r4, #2
 800319c:	42a6      	cmp	r6, r4
 800319e:	d109      	bne.n	80031b4 <__libc_init_array+0x24>
 80031a0:	f000 f822 	bl	80031e8 <_init>
 80031a4:	2600      	movs	r6, #0
 80031a6:	4d0a      	ldr	r5, [pc, #40]	; (80031d0 <__libc_init_array+0x40>)
 80031a8:	4c0a      	ldr	r4, [pc, #40]	; (80031d4 <__libc_init_array+0x44>)
 80031aa:	1b64      	subs	r4, r4, r5
 80031ac:	10a4      	asrs	r4, r4, #2
 80031ae:	42a6      	cmp	r6, r4
 80031b0:	d105      	bne.n	80031be <__libc_init_array+0x2e>
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
 80031b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b8:	4798      	blx	r3
 80031ba:	3601      	adds	r6, #1
 80031bc:	e7ee      	b.n	800319c <__libc_init_array+0xc>
 80031be:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c2:	4798      	blx	r3
 80031c4:	3601      	adds	r6, #1
 80031c6:	e7f2      	b.n	80031ae <__libc_init_array+0x1e>
 80031c8:	08003220 	.word	0x08003220
 80031cc:	08003220 	.word	0x08003220
 80031d0:	08003220 	.word	0x08003220
 80031d4:	08003224 	.word	0x08003224

080031d8 <memset>:
 80031d8:	4603      	mov	r3, r0
 80031da:	4402      	add	r2, r0
 80031dc:	4293      	cmp	r3, r2
 80031de:	d100      	bne.n	80031e2 <memset+0xa>
 80031e0:	4770      	bx	lr
 80031e2:	f803 1b01 	strb.w	r1, [r3], #1
 80031e6:	e7f9      	b.n	80031dc <memset+0x4>

080031e8 <_init>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	bf00      	nop
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr

080031f4 <_fini>:
 80031f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f6:	bf00      	nop
 80031f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fa:	bc08      	pop	{r3}
 80031fc:	469e      	mov	lr, r3
 80031fe:	4770      	bx	lr
